
lab_5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000007e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000076c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  000007e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000810  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c1c  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000891  00000000  00000000  00001524  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006fe  00000000  00000000  00001db5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  000024b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d8  00000000  00000000  00002608  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000032a  00000000  00000000  00002ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002e0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ac 00 	call	0x158	; 0x158 <main>
  88:	0c 94 b4 03 	jmp	0x768	; 0x768 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initTimer0_LEDPWM>:
    }
}

// Inicialización PWM LED (7.8kHz)
void initTimer0_LEDPWM(void) {
    TCCR0A = (1 << WGM01);        // Modo CTC (TOP=OCR0A)
  90:	82 e0       	ldi	r24, 0x02	; 2
  92:	84 bd       	out	0x24, r24	; 36
    TCCR0B = (1 << CS00);         // Sin prescaler (clock directo)
  94:	91 e0       	ldi	r25, 0x01	; 1
  96:	95 bd       	out	0x25, r25	; 37
    OCR0A = 255;                  // Frecuencia máxima (~7.8kHz)
  98:	9f ef       	ldi	r25, 0xFF	; 255
  9a:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1 << OCIE0A);       // Habilitar interrupción por comparación
  9c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    DDRB |= (1 << LED_PIN);       // Configurar pin como salida
  a0:	84 b1       	in	r24, 0x04	; 4
  a2:	81 60       	ori	r24, 0x01	; 1
  a4:	84 b9       	out	0x04, r24	; 4
  a6:	08 95       	ret

000000a8 <__vector_14>:
}

// ISR para PWM LED de alta frecuencia
ISR(TIMER0_COMPA_vect) {
  a8:	1f 92       	push	r1
  aa:	0f 92       	push	r0
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	0f 92       	push	r0
  b0:	11 24       	eor	r1, r1
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
    pwmCounter++;
  b6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pwmCounter>
  ba:	8f 5f       	subi	r24, 0xFF	; 255
  bc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <pwmCounter>
    if(pwmCounter == 0) PORTB |= (1 << LED_PIN);     // Encender
  c0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pwmCounter>
  c4:	81 11       	cpse	r24, r1
  c6:	03 c0       	rjmp	.+6      	; 0xce <__vector_14+0x26>
  c8:	85 b1       	in	r24, 0x05	; 5
  ca:	81 60       	ori	r24, 0x01	; 1
  cc:	85 b9       	out	0x05, r24	; 5
    if(pwmCounter == pwmValue) PORTB &= ~(1 << LED_PIN); // Apagar
  ce:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <pwmCounter>
  d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d6:	98 13       	cpse	r25, r24
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <__vector_14+0x38>
  da:	85 b1       	in	r24, 0x05	; 5
  dc:	8e 7f       	andi	r24, 0xFE	; 254
  de:	85 b9       	out	0x05, r24	; 5
}
  e0:	9f 91       	pop	r25
  e2:	8f 91       	pop	r24
  e4:	0f 90       	pop	r0
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	0f 90       	pop	r0
  ea:	1f 90       	pop	r1
  ec:	18 95       	reti

000000ee <updateLEDBrightness>:

// Actualizar brillo LED (0-255)
void updateLEDBrightness(uint8_t brightness) {
    pwmValue = brightness;
  ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  f2:	08 95       	ret

000000f4 <initADC>:
}

// Función initADC original
void initADC(void){
    ADMUX = 0;
  f4:	ec e7       	ldi	r30, 0x7C	; 124
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	10 82       	st	Z, r1
    ADMUX |= (1 << REFS0);      // Referencia AVcc
  fa:	80 81       	ld	r24, Z
  fc:	80 64       	ori	r24, 0x40	; 64
  fe:	80 83       	st	Z, r24
    ADMUX &= ~(1 << REFS1);     
 100:	80 81       	ld	r24, Z
 102:	8f 77       	andi	r24, 0x7F	; 127
 104:	80 83       	st	Z, r24
    ADMUX |= (1 << ADLAR);      // Ajuste a izquierda
 106:	80 81       	ld	r24, Z
 108:	80 62       	ori	r24, 0x20	; 32
 10a:	80 83       	st	Z, r24
    
    ADCSRA = 0;
 10c:	ea e7       	ldi	r30, 0x7A	; 122
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	10 82       	st	Z, r1
    ADCSRA |= (1 << ADEN);      // Habilitar ADC
 112:	80 81       	ld	r24, Z
 114:	80 68       	ori	r24, 0x80	; 128
 116:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADIE);      // Interrupción ADC
 118:	80 81       	ld	r24, Z
 11a:	88 60       	ori	r24, 0x08	; 8
 11c:	80 83       	st	Z, r24
    
    ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Prescaler 128
 11e:	80 81       	ld	r24, Z
 120:	87 60       	ori	r24, 0x07	; 7
 122:	80 83       	st	Z, r24
    
    DIDR0 |= (1 << ADC0D) | (1 << ADC1D) | (1 << ADC2D);  // Deshabilitar entradas digitales
 124:	ee e7       	ldi	r30, 0x7E	; 126
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	87 60       	ori	r24, 0x07	; 7
 12c:	80 83       	st	Z, r24
 12e:	08 95       	ret

00000130 <readADC>:
}

// Función readADC original
uint16_t readADC(uint8_t canal) {
    canal &= 0x07;
 130:	87 70       	andi	r24, 0x07	; 7
    ADMUX = (ADMUX & 0xF0) | canal;
 132:	ec e7       	ldi	r30, 0x7C	; 124
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	90 81       	ld	r25, Z
 138:	90 7f       	andi	r25, 0xF0	; 240
 13a:	89 2b       	or	r24, r25
 13c:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADSC);
 13e:	ea e7       	ldi	r30, 0x7A	; 122
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	80 64       	ori	r24, 0x40	; 64
 146:	80 83       	st	Z, r24
    while (ADCSRA & (1 << ADSC));
 148:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 14c:	86 fd       	sbrc	r24, 6
 14e:	fc cf       	rjmp	.-8      	; 0x148 <readADC+0x18>
    return ADCH;  // Valor de 8 bits
 150:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	08 95       	ret

00000158 <main>:
void initTimer0_LEDPWM(void);
void updateLEDBrightness(uint8_t brightness);

int main(void)
{
    cli();
 158:	f8 94       	cli
    // 1. Configuración de pines
    DDRB |= (1 << PORTB2) | (1 << LED_PIN);  // PB2 (servo1) + LED
 15a:	84 b1       	in	r24, 0x04	; 4
 15c:	85 60       	ori	r24, 0x05	; 5
 15e:	84 b9       	out	0x04, r24	; 4
    DDRD |= (1 << PORTD3);                   // PD3 (servo2)
 160:	8a b1       	in	r24, 0x0a	; 10
 162:	88 60       	ori	r24, 0x08	; 8
 164:	8a b9       	out	0x0a, r24	; 10
    DDRC = 0;                                // Puerto C como entrada
 166:	17 b8       	out	0x07, r1	; 7
    
    // 2. Inicialización de PWM para servos
    initFastPWM1(settedUp, 8);  // PWM1 con prescaler 8
 168:	68 e0       	ldi	r22, 0x08	; 8
 16a:	70 e0       	ldi	r23, 0x00	; 0
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	0e 94 21 01 	call	0x242	; 0x242 <initFastPWM1>
    channel(channelB, nop);     // Canal B sin invertir
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	82 e0       	ldi	r24, 0x02	; 2
 176:	0e 94 00 01 	call	0x200	; 0x200 <channel>
    topValue(39999);            // TOP para 50Hz
 17a:	8f e3       	ldi	r24, 0x3F	; 63
 17c:	9c e9       	ldi	r25, 0x9C	; 156
 17e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <topValue>
    
    initFastPWM2(nop, 256);     // PWM2 con prescaler 256
 182:	60 e0       	ldi	r22, 0x00	; 0
 184:	71 e0       	ldi	r23, 0x01	; 1
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	0e 94 9e 01 	call	0x33c	; 0x33c <initFastPWM2>
    channel2(channelB, nop);    // Canal B sin invertir
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	82 e0       	ldi	r24, 0x02	; 2
 190:	0e 94 d5 01 	call	0x3aa	; 0x3aa <channel2>
    
    // 3. Inicialización PWM LED (alta frecuencia)
    initTimer0_LEDPWM();
 194:	0e 94 48 00 	call	0x90	; 0x90 <initTimer0_LEDPWM>
    
    // 4. Inicialización ADC
    initADC();
 198:	0e 94 7a 00 	call	0xf4	; 0xf4 <initADC>
    
    sei();
 19c:	78 94       	sei

    // Bucle principal
    while (1)
    {
        // Control servo1 (PC0)
        uint16_t valorPC0 = readADC(0);
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	0e 94 98 00 	call	0x130	; 0x130 <readADC>
        convertServo(valorPC0, channelB);
 1a4:	62 e0       	ldi	r22, 0x02	; 2
 1a6:	0e 94 69 01 	call	0x2d2	; 0x2d2 <convertServo>

        // Control servo2 (PC1)
        uint16_t valorPC1 = readADC(1);
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	0e 94 98 00 	call	0x130	; 0x130 <readADC>
        convertServo2(valorPC1, channelB);
 1b0:	62 e0       	ldi	r22, 0x02	; 2
 1b2:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <convertServo2>

        // Control LED (PC2) - PWM de alta frecuencia
        updateLEDBrightness(readADC(2) >> 2);  // Convertir 10-bit a 8-bit
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	0e 94 98 00 	call	0x130	; 0x130 <readADC>
 1bc:	96 95       	lsr	r25
 1be:	87 95       	ror	r24
 1c0:	96 95       	lsr	r25
 1c2:	87 95       	ror	r24
 1c4:	0e 94 77 00 	call	0xee	; 0xee <updateLEDBrightness>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c8:	8f e3       	ldi	r24, 0x3F	; 63
 1ca:	9c e9       	ldi	r25, 0x9C	; 156
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <main+0x74>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <main+0x7a>
 1d2:	00 00       	nop
 1d4:	e4 cf       	rjmp	.-56     	; 0x19e <main+0x46>

000001d6 <__vector_21>:
    while (ADCSRA & (1 << ADSC));
    return ADCH;  // Valor de 8 bits
}

// ISR ADC original
ISR (ADC_vect){
 1d6:	1f 92       	push	r1
 1d8:	0f 92       	push	r0
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	0f 92       	push	r0
 1de:	11 24       	eor	r1, r1
 1e0:	8f 93       	push	r24
 1e2:	ef 93       	push	r30
 1e4:	ff 93       	push	r31
    ADCSRA |= (1 << ADIF);  // Limpiar flag
 1e6:	ea e7       	ldi	r30, 0x7A	; 122
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	80 61       	ori	r24, 0x10	; 16
 1ee:	80 83       	st	Z, r24
 1f0:	ff 91       	pop	r31
 1f2:	ef 91       	pop	r30
 1f4:	8f 91       	pop	r24
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <channel>:
uint16_t topVal = 0;		// establecer valor top o no 
uint16_t i, j;		//transition variables

//(channel <- channelA/channelB, inverted <- yes/nop)
void channel(uint8_t setChannel, uint8_t inverted){
	switch(setChannel){
 200:	81 30       	cpi	r24, 0x01	; 1
 202:	19 f0       	breq	.+6      	; 0x20a <channel+0xa>
 204:	82 30       	cpi	r24, 0x02	; 2
 206:	79 f0       	breq	.+30     	; 0x226 <channel+0x26>
 208:	08 95       	ret
		case 1:		// canal A
			if(inverted == 1){
 20a:	61 30       	cpi	r22, 0x01	; 1
 20c:	31 f4       	brne	.+12     	; 0x21a <channel+0x1a>
				TCCR1A |= (1 << COM1A0) | (1 << COM1A1);	//channel A inverted
 20e:	e0 e8       	ldi	r30, 0x80	; 128
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	80 81       	ld	r24, Z
 214:	80 6c       	ori	r24, 0xC0	; 192
 216:	80 83       	st	Z, r24
 218:	08 95       	ret
			}else{
				TCCR1A |= (1 << COM1A1);					//channel A no inverted
 21a:	e0 e8       	ldi	r30, 0x80	; 128
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	80 81       	ld	r24, Z
 220:	80 68       	ori	r24, 0x80	; 128
 222:	80 83       	st	Z, r24
 224:	08 95       	ret
			}
		break;
		
		case 2:		// Canal B
			if(inverted == 1){
 226:	61 30       	cpi	r22, 0x01	; 1
 228:	31 f4       	brne	.+12     	; 0x236 <channel+0x36>
				TCCR1A |= (1 << COM1B0) | (1 << COM1B1);	//channelB inverted
 22a:	e0 e8       	ldi	r30, 0x80	; 128
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	80 63       	ori	r24, 0x30	; 48
 232:	80 83       	st	Z, r24
 234:	08 95       	ret
			}else{
				TCCR1A |= (1 << COM1B1);					//channelB no inverted
 236:	e0 e8       	ldi	r30, 0x80	; 128
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	80 62       	ori	r24, 0x20	; 32
 23e:	80 83       	st	Z, r24
 240:	08 95       	ret

00000242 <initFastPWM1>:
/*Settings for Fast PWM 1, 16 bits, use it just one time
(inverted <- yes/nop, modePWM <- normal/settedUp, prescaler <- 1,8,64,256,1024)
*/
void initFastPWM1(uint8_t modePWM, uint16_t prescaler){
	//initialize register timer1
	TCCR1A = 0;			//Clean register 
 242:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0;
 246:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	switch (prescaler)
 24a:	68 30       	cpi	r22, 0x08	; 8
 24c:	71 05       	cpc	r23, r1
 24e:	21 f0       	breq	.+8      	; 0x258 <initFastPWM1+0x16>
 250:	61 15       	cp	r22, r1
 252:	74 40       	sbci	r23, 0x04	; 4
 254:	39 f0       	breq	.+14     	; 0x264 <initFastPWM1+0x22>
 256:	0b c0       	rjmp	.+22     	; 0x26e <initFastPWM1+0x2c>
	{
		case 8:
			TCCR1B |= (1 << CS11);					//prescaler 8
 258:	e1 e8       	ldi	r30, 0x81	; 129
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	90 81       	ld	r25, Z
 25e:	92 60       	ori	r25, 0x02	; 2
 260:	90 83       	st	Z, r25
		break;
 262:	05 c0       	rjmp	.+10     	; 0x26e <initFastPWM1+0x2c>
		
		case 1024:
			TCCR1B |= (1 << CS10) | (1 << CS12);	//prescaler 1024
 264:	e1 e8       	ldi	r30, 0x81	; 129
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	90 81       	ld	r25, Z
 26a:	95 60       	ori	r25, 0x05	; 5
 26c:	90 83       	st	Z, r25
		break;
	}
	
	//selecting mode of operation
	switch (modePWM)
 26e:	81 30       	cpi	r24, 0x01	; 1
 270:	19 f0       	breq	.+6      	; 0x278 <initFastPWM1+0x36>
 272:	82 30       	cpi	r24, 0x02	; 2
 274:	61 f0       	breq	.+24     	; 0x28e <initFastPWM1+0x4c>
 276:	08 95       	ret
	{
		case normal:		//fast pwm de 10 bits 
			//fast PWM 10-bit resolution
			TCCR1A |= (1 << WGM11) | (1 << WGM10);
 278:	e0 e8       	ldi	r30, 0x80	; 128
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	80 81       	ld	r24, Z
 27e:	83 60       	ori	r24, 0x03	; 3
 280:	80 83       	st	Z, r24
			TCCR1B |= (1 << WGM12);
 282:	e1 e8       	ldi	r30, 0x81	; 129
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	88 60       	ori	r24, 0x08	; 8
 28a:	80 83       	st	Z, r24
		break;
 28c:	08 95       	ret
		
		case settedUp:		//fast pwm con icr1 como top 
			//fast PWM with ICR1 as TOP
			TCCR1A |= (1 << WGM11);
 28e:	e0 e8       	ldi	r30, 0x80	; 128
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 81       	ld	r24, Z
 294:	82 60       	ori	r24, 0x02	; 2
 296:	80 83       	st	Z, r24
			TCCR1B |= (1 << WGM12) | (1 << WGM13);
 298:	e1 e8       	ldi	r30, 0x81	; 129
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	80 81       	ld	r24, Z
 29e:	88 61       	ori	r24, 0x18	; 24
 2a0:	80 83       	st	Z, r24
			topVal = 1;		// bandera que permite usar icr1
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <topVal+0x1>
 2aa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <topVal>
 2ae:	08 95       	ret

000002b0 <topValue>:
	
}

//topValue, used if mode is settedUp
void topValue(uint16_t top){
	if (topVal == 1)	{
 2b0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <topVal>
 2b4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <topVal+0x1>
 2b8:	21 30       	cpi	r18, 0x01	; 1
 2ba:	31 05       	cpc	r19, r1
 2bc:	29 f4       	brne	.+10     	; 0x2c8 <topValue+0x18>
		ICR1 = top;		//set top value
 2be:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 2c2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 2c6:	08 95       	ret
	}else{
		topVal = 0;		// ICR1 define el valor maximo del contador 
 2c8:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <topVal+0x1>
 2cc:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <topVal>
 2d0:	08 95       	ret

000002d2 <convertServo>:

//conversion for servos, mapping values
void convertServo(uint16_t analogIn, uint8_t selChannel){
	// ADCH entrada analogica 8 bits
	// (200/12)
	switch(selChannel){
 2d2:	61 30       	cpi	r22, 0x01	; 1
 2d4:	19 f0       	breq	.+6      	; 0x2dc <convertServo+0xa>
 2d6:	62 30       	cpi	r22, 0x02	; 2
 2d8:	c9 f0       	breq	.+50     	; 0x30c <convertServo+0x3a>
 2da:	08 95       	ret
		case 1:
			i = ADCH;
 2dc:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <i+0x1>
 2e6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <i>
			j = (200/12)*i+1000; // convierte un rango de 0-255 a 1000-2000
 2ea:	82 95       	swap	r24
 2ec:	92 95       	swap	r25
 2ee:	90 7f       	andi	r25, 0xF0	; 240
 2f0:	98 27       	eor	r25, r24
 2f2:	80 7f       	andi	r24, 0xF0	; 240
 2f4:	98 27       	eor	r25, r24
 2f6:	88 51       	subi	r24, 0x18	; 24
 2f8:	9c 4f       	sbci	r25, 0xFC	; 252
 2fa:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <j+0x1>
 2fe:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <j>
			OCR1A = j;
 302:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 306:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		break;
 30a:	08 95       	ret
		
		case 2:
			i = ADCH;
 30c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <i+0x1>
 316:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <i>
			j = (200/12)*i+1000;
 31a:	82 95       	swap	r24
 31c:	92 95       	swap	r25
 31e:	90 7f       	andi	r25, 0xF0	; 240
 320:	98 27       	eor	r25, r24
 322:	80 7f       	andi	r24, 0xF0	; 240
 324:	98 27       	eor	r25, r24
 326:	88 51       	subi	r24, 0x18	; 24
 328:	9c 4f       	sbci	r25, 0xFC	; 252
 32a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <j+0x1>
 32e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <j>
			OCR1B = j;
 332:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 336:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 33a:	08 95       	ret

0000033c <initFastPWM2>:
// PWM2.c
#include "PWM2.h"

void initFastPWM2(uint8_t inverted, uint16_t prescaler){
	// Reset Timer2 control registers
	TCCR2A = 0;
 33c:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 0;
 340:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>

	// Prescaler
	switch (prescaler) {
 344:	60 38       	cpi	r22, 0x80	; 128
 346:	71 05       	cpc	r23, r1
 348:	99 f0       	breq	.+38     	; 0x370 <initFastPWM2+0x34>
 34a:	20 f4       	brcc	.+8      	; 0x354 <initFastPWM2+0x18>
 34c:	60 34       	cpi	r22, 0x40	; 64
 34e:	71 05       	cpc	r23, r1
 350:	49 f0       	breq	.+18     	; 0x364 <initFastPWM2+0x28>
 352:	20 c0       	rjmp	.+64     	; 0x394 <initFastPWM2+0x58>
 354:	61 15       	cp	r22, r1
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	78 07       	cpc	r23, r24
 35a:	81 f0       	breq	.+32     	; 0x37c <initFastPWM2+0x40>
 35c:	61 15       	cp	r22, r1
 35e:	74 40       	sbci	r23, 0x04	; 4
 360:	99 f0       	breq	.+38     	; 0x388 <initFastPWM2+0x4c>
 362:	18 c0       	rjmp	.+48     	; 0x394 <initFastPWM2+0x58>
		case 64:
		TCCR2B |= (1 << CS22); // clk/64
 364:	e1 eb       	ldi	r30, 0xB1	; 177
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	80 81       	ld	r24, Z
 36a:	84 60       	ori	r24, 0x04	; 4
 36c:	80 83       	st	Z, r24
		break;
 36e:	17 c0       	rjmp	.+46     	; 0x39e <initFastPWM2+0x62>
		case 128:
		TCCR2B |= (1 << CS22) | (1 << CS20); // clk/128
 370:	e1 eb       	ldi	r30, 0xB1	; 177
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	80 81       	ld	r24, Z
 376:	85 60       	ori	r24, 0x05	; 5
 378:	80 83       	st	Z, r24
		break;
 37a:	11 c0       	rjmp	.+34     	; 0x39e <initFastPWM2+0x62>
		case 256:
		TCCR2B |= (1 << CS22) | (1 << CS21); // clk/256
 37c:	e1 eb       	ldi	r30, 0xB1	; 177
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	80 81       	ld	r24, Z
 382:	86 60       	ori	r24, 0x06	; 6
 384:	80 83       	st	Z, r24
		break;
 386:	0b c0       	rjmp	.+22     	; 0x39e <initFastPWM2+0x62>
		case 1024:
		TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20); // clk/1024
 388:	e1 eb       	ldi	r30, 0xB1	; 177
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	80 81       	ld	r24, Z
 38e:	87 60       	ori	r24, 0x07	; 7
 390:	80 83       	st	Z, r24
		break;
 392:	05 c0       	rjmp	.+10     	; 0x39e <initFastPWM2+0x62>
		default:
		TCCR2B |= (1 << CS22); // default to 64
 394:	e1 eb       	ldi	r30, 0xB1	; 177
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	80 81       	ld	r24, Z
 39a:	84 60       	ori	r24, 0x04	; 4
 39c:	80 83       	st	Z, r24
	}

	// Fast PWM mode (WGM2[2:0] = 011)
	TCCR2A |= (1 << WGM20) | (1 << WGM21);
 39e:	e0 eb       	ldi	r30, 0xB0	; 176
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 81       	ld	r24, Z
 3a4:	83 60       	ori	r24, 0x03	; 3
 3a6:	80 83       	st	Z, r24
 3a8:	08 95       	ret

000003aa <channel2>:
	// No forced output compare
	// Output pin config set in `channel2`
}

void channel2(uint8_t setChannel, uint8_t inverted){
	switch(setChannel){
 3aa:	81 30       	cpi	r24, 0x01	; 1
 3ac:	19 f0       	breq	.+6      	; 0x3b4 <channel2+0xa>
 3ae:	82 30       	cpi	r24, 0x02	; 2
 3b0:	91 f0       	breq	.+36     	; 0x3d6 <channel2+0x2c>
 3b2:	08 95       	ret
		case channelA:
		if(inverted){
 3b4:	66 23       	and	r22, r22
 3b6:	31 f0       	breq	.+12     	; 0x3c4 <channel2+0x1a>
			TCCR2A |= (1 << COM2A0) | (1 << COM2A1); // Inverted on OC2A (PB3)
 3b8:	e0 eb       	ldi	r30, 0xB0	; 176
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	80 81       	ld	r24, Z
 3be:	80 6c       	ori	r24, 0xC0	; 192
 3c0:	80 83       	st	Z, r24
 3c2:	05 c0       	rjmp	.+10     	; 0x3ce <channel2+0x24>
			} else {
			TCCR2A |= (1 << COM2A1); // Non-inverted on OC2A
 3c4:	e0 eb       	ldi	r30, 0xB0	; 176
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	80 81       	ld	r24, Z
 3ca:	80 68       	ori	r24, 0x80	; 128
 3cc:	80 83       	st	Z, r24
		}
		DDRB |= (1 << PB3); // PB3 = OC2A = output
 3ce:	84 b1       	in	r24, 0x04	; 4
 3d0:	88 60       	ori	r24, 0x08	; 8
 3d2:	84 b9       	out	0x04, r24	; 4
		break;
 3d4:	08 95       	ret

		case channelB:
		if(inverted){
 3d6:	66 23       	and	r22, r22
 3d8:	31 f0       	breq	.+12     	; 0x3e6 <channel2+0x3c>
			TCCR2A |= (1 << COM2B0) | (1 << COM2B1); // Inverted on OC2B (PD3)
 3da:	e0 eb       	ldi	r30, 0xB0	; 176
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	80 81       	ld	r24, Z
 3e0:	80 63       	ori	r24, 0x30	; 48
 3e2:	80 83       	st	Z, r24
 3e4:	05 c0       	rjmp	.+10     	; 0x3f0 <channel2+0x46>
			} else {
			TCCR2A |= (1 << COM2B1); // Non-inverted on OC2B
 3e6:	e0 eb       	ldi	r30, 0xB0	; 176
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	80 81       	ld	r24, Z
 3ec:	80 62       	ori	r24, 0x20	; 32
 3ee:	80 83       	st	Z, r24
		}
		DDRD |= (1 << PD3); // PD3 = OC2B = output
 3f0:	8a b1       	in	r24, 0x0a	; 10
 3f2:	88 60       	ori	r24, 0x08	; 8
 3f4:	8a b9       	out	0x0a, r24	; 10
 3f6:	08 95       	ret

000003f8 <convertServo2>:
		break;
	}
}

void convertServo2(uint16_t analogIn, uint8_t selChannel){
 3f8:	cf 93       	push	r28
 3fa:	c6 2f       	mov	r28, r22
	uint8_t j;
	j = (uint8_t)(((200.0 / 1024.0) * analogIn) + 25); // Ajuste para servo (duty 5% a 10%)
 3fc:	bc 01       	movw	r22, r24
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	0e 94 b9 02 	call	0x572	; 0x572 <__floatunsisf>
 406:	20 e0       	ldi	r18, 0x00	; 0
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	48 e4       	ldi	r20, 0x48	; 72
 40c:	5e e3       	ldi	r21, 0x3E	; 62
 40e:	0e 94 47 03 	call	0x68e	; 0x68e <__mulsf3>
 412:	20 e0       	ldi	r18, 0x00	; 0
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	48 ec       	ldi	r20, 0xC8	; 200
 418:	51 e4       	ldi	r21, 0x41	; 65
 41a:	0e 94 1e 02 	call	0x43c	; 0x43c <__addsf3>
 41e:	0e 94 8a 02 	call	0x514	; 0x514 <__fixunssfsi>
	
	switch(selChannel){
 422:	c1 30       	cpi	r28, 0x01	; 1
 424:	19 f0       	breq	.+6      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 426:	c2 30       	cpi	r28, 0x02	; 2
 428:	21 f0       	breq	.+8      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 42a:	05 c0       	rjmp	.+10     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
		case channelA:
		OCR2A = j;
 42c:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
		break;
 430:	02 c0       	rjmp	.+4      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
		case channelB:
		OCR2B = j;
 432:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
		break;
	}
 436:	cf 91       	pop	r28
 438:	08 95       	ret

0000043a <__subsf3>:
 43a:	50 58       	subi	r21, 0x80	; 128

0000043c <__addsf3>:
 43c:	bb 27       	eor	r27, r27
 43e:	aa 27       	eor	r26, r26
 440:	0e 94 35 02 	call	0x46a	; 0x46a <__addsf3x>
 444:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__fp_round>
 448:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__fp_pscA>
 44c:	38 f0       	brcs	.+14     	; 0x45c <__addsf3+0x20>
 44e:	0e 94 06 03 	call	0x60c	; 0x60c <__fp_pscB>
 452:	20 f0       	brcs	.+8      	; 0x45c <__addsf3+0x20>
 454:	39 f4       	brne	.+14     	; 0x464 <__addsf3+0x28>
 456:	9f 3f       	cpi	r25, 0xFF	; 255
 458:	19 f4       	brne	.+6      	; 0x460 <__addsf3+0x24>
 45a:	26 f4       	brtc	.+8      	; 0x464 <__addsf3+0x28>
 45c:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__fp_nan>
 460:	0e f4       	brtc	.+2      	; 0x464 <__addsf3+0x28>
 462:	e0 95       	com	r30
 464:	e7 fb       	bst	r30, 7
 466:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_inf>

0000046a <__addsf3x>:
 46a:	e9 2f       	mov	r30, r25
 46c:	0e 94 1e 03 	call	0x63c	; 0x63c <__fp_split3>
 470:	58 f3       	brcs	.-42     	; 0x448 <__addsf3+0xc>
 472:	ba 17       	cp	r27, r26
 474:	62 07       	cpc	r22, r18
 476:	73 07       	cpc	r23, r19
 478:	84 07       	cpc	r24, r20
 47a:	95 07       	cpc	r25, r21
 47c:	20 f0       	brcs	.+8      	; 0x486 <__addsf3x+0x1c>
 47e:	79 f4       	brne	.+30     	; 0x49e <__addsf3x+0x34>
 480:	a6 f5       	brtc	.+104    	; 0x4ea <__addsf3x+0x80>
 482:	0c 94 40 03 	jmp	0x680	; 0x680 <__fp_zero>
 486:	0e f4       	brtc	.+2      	; 0x48a <__addsf3x+0x20>
 488:	e0 95       	com	r30
 48a:	0b 2e       	mov	r0, r27
 48c:	ba 2f       	mov	r27, r26
 48e:	a0 2d       	mov	r26, r0
 490:	0b 01       	movw	r0, r22
 492:	b9 01       	movw	r22, r18
 494:	90 01       	movw	r18, r0
 496:	0c 01       	movw	r0, r24
 498:	ca 01       	movw	r24, r20
 49a:	a0 01       	movw	r20, r0
 49c:	11 24       	eor	r1, r1
 49e:	ff 27       	eor	r31, r31
 4a0:	59 1b       	sub	r21, r25
 4a2:	99 f0       	breq	.+38     	; 0x4ca <__addsf3x+0x60>
 4a4:	59 3f       	cpi	r21, 0xF9	; 249
 4a6:	50 f4       	brcc	.+20     	; 0x4bc <__addsf3x+0x52>
 4a8:	50 3e       	cpi	r21, 0xE0	; 224
 4aa:	68 f1       	brcs	.+90     	; 0x506 <__addsf3x+0x9c>
 4ac:	1a 16       	cp	r1, r26
 4ae:	f0 40       	sbci	r31, 0x00	; 0
 4b0:	a2 2f       	mov	r26, r18
 4b2:	23 2f       	mov	r18, r19
 4b4:	34 2f       	mov	r19, r20
 4b6:	44 27       	eor	r20, r20
 4b8:	58 5f       	subi	r21, 0xF8	; 248
 4ba:	f3 cf       	rjmp	.-26     	; 0x4a2 <__addsf3x+0x38>
 4bc:	46 95       	lsr	r20
 4be:	37 95       	ror	r19
 4c0:	27 95       	ror	r18
 4c2:	a7 95       	ror	r26
 4c4:	f0 40       	sbci	r31, 0x00	; 0
 4c6:	53 95       	inc	r21
 4c8:	c9 f7       	brne	.-14     	; 0x4bc <__addsf3x+0x52>
 4ca:	7e f4       	brtc	.+30     	; 0x4ea <__addsf3x+0x80>
 4cc:	1f 16       	cp	r1, r31
 4ce:	ba 0b       	sbc	r27, r26
 4d0:	62 0b       	sbc	r22, r18
 4d2:	73 0b       	sbc	r23, r19
 4d4:	84 0b       	sbc	r24, r20
 4d6:	ba f0       	brmi	.+46     	; 0x506 <__addsf3x+0x9c>
 4d8:	91 50       	subi	r25, 0x01	; 1
 4da:	a1 f0       	breq	.+40     	; 0x504 <__addsf3x+0x9a>
 4dc:	ff 0f       	add	r31, r31
 4de:	bb 1f       	adc	r27, r27
 4e0:	66 1f       	adc	r22, r22
 4e2:	77 1f       	adc	r23, r23
 4e4:	88 1f       	adc	r24, r24
 4e6:	c2 f7       	brpl	.-16     	; 0x4d8 <__addsf3x+0x6e>
 4e8:	0e c0       	rjmp	.+28     	; 0x506 <__addsf3x+0x9c>
 4ea:	ba 0f       	add	r27, r26
 4ec:	62 1f       	adc	r22, r18
 4ee:	73 1f       	adc	r23, r19
 4f0:	84 1f       	adc	r24, r20
 4f2:	48 f4       	brcc	.+18     	; 0x506 <__addsf3x+0x9c>
 4f4:	87 95       	ror	r24
 4f6:	77 95       	ror	r23
 4f8:	67 95       	ror	r22
 4fa:	b7 95       	ror	r27
 4fc:	f7 95       	ror	r31
 4fe:	9e 3f       	cpi	r25, 0xFE	; 254
 500:	08 f0       	brcs	.+2      	; 0x504 <__addsf3x+0x9a>
 502:	b0 cf       	rjmp	.-160    	; 0x464 <__addsf3+0x28>
 504:	93 95       	inc	r25
 506:	88 0f       	add	r24, r24
 508:	08 f0       	brcs	.+2      	; 0x50c <__addsf3x+0xa2>
 50a:	99 27       	eor	r25, r25
 50c:	ee 0f       	add	r30, r30
 50e:	97 95       	ror	r25
 510:	87 95       	ror	r24
 512:	08 95       	ret

00000514 <__fixunssfsi>:
 514:	0e 94 26 03 	call	0x64c	; 0x64c <__fp_splitA>
 518:	88 f0       	brcs	.+34     	; 0x53c <__fixunssfsi+0x28>
 51a:	9f 57       	subi	r25, 0x7F	; 127
 51c:	98 f0       	brcs	.+38     	; 0x544 <__fixunssfsi+0x30>
 51e:	b9 2f       	mov	r27, r25
 520:	99 27       	eor	r25, r25
 522:	b7 51       	subi	r27, 0x17	; 23
 524:	b0 f0       	brcs	.+44     	; 0x552 <__fixunssfsi+0x3e>
 526:	e1 f0       	breq	.+56     	; 0x560 <__fixunssfsi+0x4c>
 528:	66 0f       	add	r22, r22
 52a:	77 1f       	adc	r23, r23
 52c:	88 1f       	adc	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	1a f0       	brmi	.+6      	; 0x538 <__fixunssfsi+0x24>
 532:	ba 95       	dec	r27
 534:	c9 f7       	brne	.-14     	; 0x528 <__fixunssfsi+0x14>
 536:	14 c0       	rjmp	.+40     	; 0x560 <__fixunssfsi+0x4c>
 538:	b1 30       	cpi	r27, 0x01	; 1
 53a:	91 f0       	breq	.+36     	; 0x560 <__fixunssfsi+0x4c>
 53c:	0e 94 40 03 	call	0x680	; 0x680 <__fp_zero>
 540:	b1 e0       	ldi	r27, 0x01	; 1
 542:	08 95       	ret
 544:	0c 94 40 03 	jmp	0x680	; 0x680 <__fp_zero>
 548:	67 2f       	mov	r22, r23
 54a:	78 2f       	mov	r23, r24
 54c:	88 27       	eor	r24, r24
 54e:	b8 5f       	subi	r27, 0xF8	; 248
 550:	39 f0       	breq	.+14     	; 0x560 <__fixunssfsi+0x4c>
 552:	b9 3f       	cpi	r27, 0xF9	; 249
 554:	cc f3       	brlt	.-14     	; 0x548 <__fixunssfsi+0x34>
 556:	86 95       	lsr	r24
 558:	77 95       	ror	r23
 55a:	67 95       	ror	r22
 55c:	b3 95       	inc	r27
 55e:	d9 f7       	brne	.-10     	; 0x556 <__fixunssfsi+0x42>
 560:	3e f4       	brtc	.+14     	; 0x570 <__fixunssfsi+0x5c>
 562:	90 95       	com	r25
 564:	80 95       	com	r24
 566:	70 95       	com	r23
 568:	61 95       	neg	r22
 56a:	7f 4f       	sbci	r23, 0xFF	; 255
 56c:	8f 4f       	sbci	r24, 0xFF	; 255
 56e:	9f 4f       	sbci	r25, 0xFF	; 255
 570:	08 95       	ret

00000572 <__floatunsisf>:
 572:	e8 94       	clt
 574:	09 c0       	rjmp	.+18     	; 0x588 <__floatsisf+0x12>

00000576 <__floatsisf>:
 576:	97 fb       	bst	r25, 7
 578:	3e f4       	brtc	.+14     	; 0x588 <__floatsisf+0x12>
 57a:	90 95       	com	r25
 57c:	80 95       	com	r24
 57e:	70 95       	com	r23
 580:	61 95       	neg	r22
 582:	7f 4f       	sbci	r23, 0xFF	; 255
 584:	8f 4f       	sbci	r24, 0xFF	; 255
 586:	9f 4f       	sbci	r25, 0xFF	; 255
 588:	99 23       	and	r25, r25
 58a:	a9 f0       	breq	.+42     	; 0x5b6 <__floatsisf+0x40>
 58c:	f9 2f       	mov	r31, r25
 58e:	96 e9       	ldi	r25, 0x96	; 150
 590:	bb 27       	eor	r27, r27
 592:	93 95       	inc	r25
 594:	f6 95       	lsr	r31
 596:	87 95       	ror	r24
 598:	77 95       	ror	r23
 59a:	67 95       	ror	r22
 59c:	b7 95       	ror	r27
 59e:	f1 11       	cpse	r31, r1
 5a0:	f8 cf       	rjmp	.-16     	; 0x592 <__floatsisf+0x1c>
 5a2:	fa f4       	brpl	.+62     	; 0x5e2 <__floatsisf+0x6c>
 5a4:	bb 0f       	add	r27, r27
 5a6:	11 f4       	brne	.+4      	; 0x5ac <__floatsisf+0x36>
 5a8:	60 ff       	sbrs	r22, 0
 5aa:	1b c0       	rjmp	.+54     	; 0x5e2 <__floatsisf+0x6c>
 5ac:	6f 5f       	subi	r22, 0xFF	; 255
 5ae:	7f 4f       	sbci	r23, 0xFF	; 255
 5b0:	8f 4f       	sbci	r24, 0xFF	; 255
 5b2:	9f 4f       	sbci	r25, 0xFF	; 255
 5b4:	16 c0       	rjmp	.+44     	; 0x5e2 <__floatsisf+0x6c>
 5b6:	88 23       	and	r24, r24
 5b8:	11 f0       	breq	.+4      	; 0x5be <__floatsisf+0x48>
 5ba:	96 e9       	ldi	r25, 0x96	; 150
 5bc:	11 c0       	rjmp	.+34     	; 0x5e0 <__floatsisf+0x6a>
 5be:	77 23       	and	r23, r23
 5c0:	21 f0       	breq	.+8      	; 0x5ca <__floatsisf+0x54>
 5c2:	9e e8       	ldi	r25, 0x8E	; 142
 5c4:	87 2f       	mov	r24, r23
 5c6:	76 2f       	mov	r23, r22
 5c8:	05 c0       	rjmp	.+10     	; 0x5d4 <__floatsisf+0x5e>
 5ca:	66 23       	and	r22, r22
 5cc:	71 f0       	breq	.+28     	; 0x5ea <__floatsisf+0x74>
 5ce:	96 e8       	ldi	r25, 0x86	; 134
 5d0:	86 2f       	mov	r24, r22
 5d2:	70 e0       	ldi	r23, 0x00	; 0
 5d4:	60 e0       	ldi	r22, 0x00	; 0
 5d6:	2a f0       	brmi	.+10     	; 0x5e2 <__floatsisf+0x6c>
 5d8:	9a 95       	dec	r25
 5da:	66 0f       	add	r22, r22
 5dc:	77 1f       	adc	r23, r23
 5de:	88 1f       	adc	r24, r24
 5e0:	da f7       	brpl	.-10     	; 0x5d8 <__floatsisf+0x62>
 5e2:	88 0f       	add	r24, r24
 5e4:	96 95       	lsr	r25
 5e6:	87 95       	ror	r24
 5e8:	97 f9       	bld	r25, 7
 5ea:	08 95       	ret

000005ec <__fp_inf>:
 5ec:	97 f9       	bld	r25, 7
 5ee:	9f 67       	ori	r25, 0x7F	; 127
 5f0:	80 e8       	ldi	r24, 0x80	; 128
 5f2:	70 e0       	ldi	r23, 0x00	; 0
 5f4:	60 e0       	ldi	r22, 0x00	; 0
 5f6:	08 95       	ret

000005f8 <__fp_nan>:
 5f8:	9f ef       	ldi	r25, 0xFF	; 255
 5fa:	80 ec       	ldi	r24, 0xC0	; 192
 5fc:	08 95       	ret

000005fe <__fp_pscA>:
 5fe:	00 24       	eor	r0, r0
 600:	0a 94       	dec	r0
 602:	16 16       	cp	r1, r22
 604:	17 06       	cpc	r1, r23
 606:	18 06       	cpc	r1, r24
 608:	09 06       	cpc	r0, r25
 60a:	08 95       	ret

0000060c <__fp_pscB>:
 60c:	00 24       	eor	r0, r0
 60e:	0a 94       	dec	r0
 610:	12 16       	cp	r1, r18
 612:	13 06       	cpc	r1, r19
 614:	14 06       	cpc	r1, r20
 616:	05 06       	cpc	r0, r21
 618:	08 95       	ret

0000061a <__fp_round>:
 61a:	09 2e       	mov	r0, r25
 61c:	03 94       	inc	r0
 61e:	00 0c       	add	r0, r0
 620:	11 f4       	brne	.+4      	; 0x626 <__fp_round+0xc>
 622:	88 23       	and	r24, r24
 624:	52 f0       	brmi	.+20     	; 0x63a <__fp_round+0x20>
 626:	bb 0f       	add	r27, r27
 628:	40 f4       	brcc	.+16     	; 0x63a <__fp_round+0x20>
 62a:	bf 2b       	or	r27, r31
 62c:	11 f4       	brne	.+4      	; 0x632 <__fp_round+0x18>
 62e:	60 ff       	sbrs	r22, 0
 630:	04 c0       	rjmp	.+8      	; 0x63a <__fp_round+0x20>
 632:	6f 5f       	subi	r22, 0xFF	; 255
 634:	7f 4f       	sbci	r23, 0xFF	; 255
 636:	8f 4f       	sbci	r24, 0xFF	; 255
 638:	9f 4f       	sbci	r25, 0xFF	; 255
 63a:	08 95       	ret

0000063c <__fp_split3>:
 63c:	57 fd       	sbrc	r21, 7
 63e:	90 58       	subi	r25, 0x80	; 128
 640:	44 0f       	add	r20, r20
 642:	55 1f       	adc	r21, r21
 644:	59 f0       	breq	.+22     	; 0x65c <__fp_splitA+0x10>
 646:	5f 3f       	cpi	r21, 0xFF	; 255
 648:	71 f0       	breq	.+28     	; 0x666 <__fp_splitA+0x1a>
 64a:	47 95       	ror	r20

0000064c <__fp_splitA>:
 64c:	88 0f       	add	r24, r24
 64e:	97 fb       	bst	r25, 7
 650:	99 1f       	adc	r25, r25
 652:	61 f0       	breq	.+24     	; 0x66c <__fp_splitA+0x20>
 654:	9f 3f       	cpi	r25, 0xFF	; 255
 656:	79 f0       	breq	.+30     	; 0x676 <__fp_splitA+0x2a>
 658:	87 95       	ror	r24
 65a:	08 95       	ret
 65c:	12 16       	cp	r1, r18
 65e:	13 06       	cpc	r1, r19
 660:	14 06       	cpc	r1, r20
 662:	55 1f       	adc	r21, r21
 664:	f2 cf       	rjmp	.-28     	; 0x64a <__fp_split3+0xe>
 666:	46 95       	lsr	r20
 668:	f1 df       	rcall	.-30     	; 0x64c <__fp_splitA>
 66a:	08 c0       	rjmp	.+16     	; 0x67c <__fp_splitA+0x30>
 66c:	16 16       	cp	r1, r22
 66e:	17 06       	cpc	r1, r23
 670:	18 06       	cpc	r1, r24
 672:	99 1f       	adc	r25, r25
 674:	f1 cf       	rjmp	.-30     	; 0x658 <__fp_splitA+0xc>
 676:	86 95       	lsr	r24
 678:	71 05       	cpc	r23, r1
 67a:	61 05       	cpc	r22, r1
 67c:	08 94       	sec
 67e:	08 95       	ret

00000680 <__fp_zero>:
 680:	e8 94       	clt

00000682 <__fp_szero>:
 682:	bb 27       	eor	r27, r27
 684:	66 27       	eor	r22, r22
 686:	77 27       	eor	r23, r23
 688:	cb 01       	movw	r24, r22
 68a:	97 f9       	bld	r25, 7
 68c:	08 95       	ret

0000068e <__mulsf3>:
 68e:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__mulsf3x>
 692:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__fp_round>
 696:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__fp_pscA>
 69a:	38 f0       	brcs	.+14     	; 0x6aa <__mulsf3+0x1c>
 69c:	0e 94 06 03 	call	0x60c	; 0x60c <__fp_pscB>
 6a0:	20 f0       	brcs	.+8      	; 0x6aa <__mulsf3+0x1c>
 6a2:	95 23       	and	r25, r21
 6a4:	11 f0       	breq	.+4      	; 0x6aa <__mulsf3+0x1c>
 6a6:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_inf>
 6aa:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__fp_nan>
 6ae:	11 24       	eor	r1, r1
 6b0:	0c 94 41 03 	jmp	0x682	; 0x682 <__fp_szero>

000006b4 <__mulsf3x>:
 6b4:	0e 94 1e 03 	call	0x63c	; 0x63c <__fp_split3>
 6b8:	70 f3       	brcs	.-36     	; 0x696 <__mulsf3+0x8>

000006ba <__mulsf3_pse>:
 6ba:	95 9f       	mul	r25, r21
 6bc:	c1 f3       	breq	.-16     	; 0x6ae <__mulsf3+0x20>
 6be:	95 0f       	add	r25, r21
 6c0:	50 e0       	ldi	r21, 0x00	; 0
 6c2:	55 1f       	adc	r21, r21
 6c4:	62 9f       	mul	r22, r18
 6c6:	f0 01       	movw	r30, r0
 6c8:	72 9f       	mul	r23, r18
 6ca:	bb 27       	eor	r27, r27
 6cc:	f0 0d       	add	r31, r0
 6ce:	b1 1d       	adc	r27, r1
 6d0:	63 9f       	mul	r22, r19
 6d2:	aa 27       	eor	r26, r26
 6d4:	f0 0d       	add	r31, r0
 6d6:	b1 1d       	adc	r27, r1
 6d8:	aa 1f       	adc	r26, r26
 6da:	64 9f       	mul	r22, r20
 6dc:	66 27       	eor	r22, r22
 6de:	b0 0d       	add	r27, r0
 6e0:	a1 1d       	adc	r26, r1
 6e2:	66 1f       	adc	r22, r22
 6e4:	82 9f       	mul	r24, r18
 6e6:	22 27       	eor	r18, r18
 6e8:	b0 0d       	add	r27, r0
 6ea:	a1 1d       	adc	r26, r1
 6ec:	62 1f       	adc	r22, r18
 6ee:	73 9f       	mul	r23, r19
 6f0:	b0 0d       	add	r27, r0
 6f2:	a1 1d       	adc	r26, r1
 6f4:	62 1f       	adc	r22, r18
 6f6:	83 9f       	mul	r24, r19
 6f8:	a0 0d       	add	r26, r0
 6fa:	61 1d       	adc	r22, r1
 6fc:	22 1f       	adc	r18, r18
 6fe:	74 9f       	mul	r23, r20
 700:	33 27       	eor	r19, r19
 702:	a0 0d       	add	r26, r0
 704:	61 1d       	adc	r22, r1
 706:	23 1f       	adc	r18, r19
 708:	84 9f       	mul	r24, r20
 70a:	60 0d       	add	r22, r0
 70c:	21 1d       	adc	r18, r1
 70e:	82 2f       	mov	r24, r18
 710:	76 2f       	mov	r23, r22
 712:	6a 2f       	mov	r22, r26
 714:	11 24       	eor	r1, r1
 716:	9f 57       	subi	r25, 0x7F	; 127
 718:	50 40       	sbci	r21, 0x00	; 0
 71a:	9a f0       	brmi	.+38     	; 0x742 <__mulsf3_pse+0x88>
 71c:	f1 f0       	breq	.+60     	; 0x75a <__mulsf3_pse+0xa0>
 71e:	88 23       	and	r24, r24
 720:	4a f0       	brmi	.+18     	; 0x734 <__mulsf3_pse+0x7a>
 722:	ee 0f       	add	r30, r30
 724:	ff 1f       	adc	r31, r31
 726:	bb 1f       	adc	r27, r27
 728:	66 1f       	adc	r22, r22
 72a:	77 1f       	adc	r23, r23
 72c:	88 1f       	adc	r24, r24
 72e:	91 50       	subi	r25, 0x01	; 1
 730:	50 40       	sbci	r21, 0x00	; 0
 732:	a9 f7       	brne	.-22     	; 0x71e <__mulsf3_pse+0x64>
 734:	9e 3f       	cpi	r25, 0xFE	; 254
 736:	51 05       	cpc	r21, r1
 738:	80 f0       	brcs	.+32     	; 0x75a <__mulsf3_pse+0xa0>
 73a:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_inf>
 73e:	0c 94 41 03 	jmp	0x682	; 0x682 <__fp_szero>
 742:	5f 3f       	cpi	r21, 0xFF	; 255
 744:	e4 f3       	brlt	.-8      	; 0x73e <__mulsf3_pse+0x84>
 746:	98 3e       	cpi	r25, 0xE8	; 232
 748:	d4 f3       	brlt	.-12     	; 0x73e <__mulsf3_pse+0x84>
 74a:	86 95       	lsr	r24
 74c:	77 95       	ror	r23
 74e:	67 95       	ror	r22
 750:	b7 95       	ror	r27
 752:	f7 95       	ror	r31
 754:	e7 95       	ror	r30
 756:	9f 5f       	subi	r25, 0xFF	; 255
 758:	c1 f7       	brne	.-16     	; 0x74a <__mulsf3_pse+0x90>
 75a:	fe 2b       	or	r31, r30
 75c:	88 0f       	add	r24, r24
 75e:	91 1d       	adc	r25, r1
 760:	96 95       	lsr	r25
 762:	87 95       	ror	r24
 764:	97 f9       	bld	r25, 7
 766:	08 95       	ret

00000768 <_exit>:
 768:	f8 94       	cli

0000076a <__stop_program>:
 76a:	ff cf       	rjmp	.-2      	; 0x76a <__stop_program>
