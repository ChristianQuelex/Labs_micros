
lab_5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000007a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000072e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  000007a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c2e  00000000  00000000  000008b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000861  00000000  00000000  000014e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006aa  00000000  00000000  00001d43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  000023f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000487  00000000  00000000  00002500  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003f0  00000000  00000000  00002987  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002d77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 c9 00 	jmp	0x192	; 0x192 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  88:	0c 94 95 03 	jmp	0x72a	; 0x72a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:




void initADC(void){
	ADMUX = 0;
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	//Vref = AVcc = 5Vs
	ADMUX |= (1 << REFS0);		//mas significativos
  96:	80 81       	ld	r24, Z
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);		//menos significativos 
  9c:	80 81       	ld	r24, Z
  9e:	8f 77       	andi	r24, 0x7F	; 127
  a0:	80 83       	st	Z, r24
	
	ADMUX |= (1 << ADLAR);	//left adjust
  a2:	80 81       	ld	r24, Z
  a4:	80 62       	ori	r24, 0x20	; 32
  a6:	80 83       	st	Z, r24
	
	ADCSRA = 0;
  a8:	ea e7       	ldi	r30, 0x7A	; 122
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADEN);	//turn on ADC  - Este
  ae:	80 81       	ld	r24, Z
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);	//interruption
  b4:	80 81       	ld	r24, Z
  b6:	88 60       	ori	r24, 0x08	; 8
  b8:	80 83       	st	Z, r24
	
	//prescaler 128 > 125kHz
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  ba:	80 81       	ld	r24, Z
  bc:	87 60       	ori	r24, 0x07	; 7
  be:	80 83       	st	Z, r24
	
	DIDR0 |= (1 << ADC0D) | (1 << ADC1D);	//disable PC0 digital input
  c0:	ee e7       	ldi	r30, 0x7E	; 126
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	83 60       	ori	r24, 0x03	; 3
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <readADC>:
}

uint16_t readADC(uint8_t canal)
{
	ADMUX = (1 << REFS0) | (canal & 0x0F); // Seleccionar canal y referencia
  cc:	8f 70       	andi	r24, 0x0F	; 15
  ce:	80 64       	ori	r24, 0x40	; 64
  d0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	8f e9       	ldi	r24, 0x9F	; 159
  d6:	9f e0       	ldi	r25, 0x0F	; 15
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <readADC+0xc>
  dc:	00 c0       	rjmp	.+0      	; 0xde <readADC+0x12>
  de:	00 00       	nop
	_delay_ms(1); // Tiempo de adquisición

	ADCSRA |= (1 << ADSC); // Iniciar conversión
  e0:	ea e7       	ldi	r30, 0x7A	; 122
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	80 64       	ori	r24, 0x40	; 64
  e8:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC)); // Esperar
  ea:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  ee:	86 fd       	sbrc	r24, 6
  f0:	fc cf       	rjmp	.-8      	; 0xea <readADC+0x1e>

	return ADC; // Valor de 10 bits
  f2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  f6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  fa:	08 95       	ret

000000fc <main>:
uint16_t readADC(uint8_t canal);


int main(void)
{
	cli();
  fc:	f8 94       	cli
	DDRB |= (1 << PORTB2);		//PB2 as output (OC0A and OCR0B)
  fe:	84 b1       	in	r24, 0x04	; 4
 100:	84 60       	ori	r24, 0x04	; 4
 102:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << PORTD3);		//pD3 control B
 104:	8a b1       	in	r24, 0x0a	; 10
 106:	88 60       	ori	r24, 0x08	; 8
 108:	8a b9       	out	0x0a, r24	; 10
	/*TCCR1A = 0;
	TCCR1B = 0;*/
	
	DDRC = 0;		//Puerto C como entrada 
 10a:	17 b8       	out	0x07, r1	; 7
	
	
	initFastPWM1(settedUp, 8);		//pwm1 precaler 8
 10c:	68 e0       	ldi	r22, 0x08	; 8
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	0e 94 02 01 	call	0x204	; 0x204 <initFastPWM1>
	channel(channelB, nop);			//salida no invertida 
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <channel>
	topValue(39999);				// top para 50hz
 11e:	8f e3       	ldi	r24, 0x3F	; 63
 120:	9c e9       	ldi	r25, 0x9C	; 156
 122:	0e 94 39 01 	call	0x272	; 0x272 <topValue>
	
	initFastPWM2(nop, 256);			//timer 2, prescaler 64
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	71 e0       	ldi	r23, 0x01	; 1
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <initFastPWM2>
	channel2(channelB, nop);		//canal B PD3
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	0e 94 b6 01 	call	0x36c	; 0x36c <channel2>
	uint16_t i = 0;
	//uint8_t restart = 0;
	uint16_t j = 1000;
	OCR1B = j;
	*/
	initADC();  // Activa el ADC (con ADCH como salida de 8 bits)
 138:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
	sei();
 13c:	78 94       	sei
	
	while (1)
	{
		 uint16_t valorPC0 = readADC(0);
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	0e 94 66 00 	call	0xcc	; 0xcc <readADC>
		 convertServo(valorPC0, channelB);
 144:	62 e0       	ldi	r22, 0x02	; 2
 146:	0e 94 4a 01 	call	0x294	; 0x294 <convertServo>
 14a:	8f e3       	ldi	r24, 0x3F	; 63
 14c:	9c e9       	ldi	r25, 0x9C	; 156
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <main+0x52>
 152:	00 c0       	rjmp	.+0      	; 0x154 <main+0x58>
 154:	00 00       	nop

		 _delay_ms(10);

		 // Leer PC1 (ADC1) y controlar servo 2 (Timer2)
		 uint16_t valorPC1 = readADC(1);
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 66 00 	call	0xcc	; 0xcc <readADC>
		 convertServo2(valorPC1, channelB);
 15c:	62 e0       	ldi	r22, 0x02	; 2
 15e:	0e 94 dd 01 	call	0x3ba	; 0x3ba <convertServo2>
 162:	8f e3       	ldi	r24, 0x3F	; 63
 164:	9c e9       	ldi	r25, 0x9C	; 156
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <main+0x6a>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <main+0x70>
 16c:	00 00       	nop

		 _delay_ms(10);
		
		ADCSRA |= (1 << ADSC);		// Inicia conversión ADC
 16e:	ea e7       	ldi	r30, 0x7A	; 122
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	80 64       	ori	r24, 0x40	; 64
 176:	80 83       	st	Z, r24
 178:	8f e3       	ldi	r24, 0x3F	; 63
 17a:	9f e1       	ldi	r25, 0x1F	; 31
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <main+0x80>
 180:	00 c0       	rjmp	.+0      	; 0x182 <main+0x86>
 182:	00 00       	nop
		_delay_ms(2);				// Espera un poco para asegurarse que termina
		
		
		convertServo(ADCH, channelB);			// Ajusta el duty del canalB según entrada analógica
 184:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 188:	62 e0       	ldi	r22, 0x02	; 2
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 4a 01 	call	0x294	; 0x294 <convertServo>
 190:	d6 cf       	rjmp	.-84     	; 0x13e <main+0x42>

00000192 <__vector_21>:
	return ADC; // Valor de 10 bits
}



ISR (ADC_vect){
 192:	1f 92       	push	r1
 194:	0f 92       	push	r0
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	0f 92       	push	r0
 19a:	11 24       	eor	r1, r1
 19c:	8f 93       	push	r24
 19e:	ef 93       	push	r30
 1a0:	ff 93       	push	r31
	PORTD = ADCH;			//show in portd value of adc
 1a2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1a6:	8b b9       	out	0x0b, r24	; 11
	ADCSRA |= (1 << ADIF);	//turn off flag
 1a8:	ea e7       	ldi	r30, 0x7A	; 122
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	80 61       	ori	r24, 0x10	; 16
 1b0:	80 83       	st	Z, r24
}
 1b2:	ff 91       	pop	r31
 1b4:	ef 91       	pop	r30
 1b6:	8f 91       	pop	r24
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <channel>:
uint16_t topVal = 0;		// establecer valor top o no 
uint16_t i, j;		//transition variables

//(channel <- channelA/channelB, inverted <- yes/nop)
void channel(uint8_t setChannel, uint8_t inverted){
	switch(setChannel){
 1c2:	81 30       	cpi	r24, 0x01	; 1
 1c4:	19 f0       	breq	.+6      	; 0x1cc <channel+0xa>
 1c6:	82 30       	cpi	r24, 0x02	; 2
 1c8:	79 f0       	breq	.+30     	; 0x1e8 <channel+0x26>
 1ca:	08 95       	ret
		case 1:		// canal A
			if(inverted == 1){
 1cc:	61 30       	cpi	r22, 0x01	; 1
 1ce:	31 f4       	brne	.+12     	; 0x1dc <channel+0x1a>
				TCCR1A |= (1 << COM1A0) | (1 << COM1A1);	//channel A inverted
 1d0:	e0 e8       	ldi	r30, 0x80	; 128
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	80 6c       	ori	r24, 0xC0	; 192
 1d8:	80 83       	st	Z, r24
 1da:	08 95       	ret
			}else{
				TCCR1A |= (1 << COM1A1);					//channel A no inverted
 1dc:	e0 e8       	ldi	r30, 0x80	; 128
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	80 68       	ori	r24, 0x80	; 128
 1e4:	80 83       	st	Z, r24
 1e6:	08 95       	ret
			}
		break;
		
		case 2:		// Canal B
			if(inverted == 1){
 1e8:	61 30       	cpi	r22, 0x01	; 1
 1ea:	31 f4       	brne	.+12     	; 0x1f8 <channel+0x36>
				TCCR1A |= (1 << COM1B0) | (1 << COM1B1);	//channelB inverted
 1ec:	e0 e8       	ldi	r30, 0x80	; 128
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	80 63       	ori	r24, 0x30	; 48
 1f4:	80 83       	st	Z, r24
 1f6:	08 95       	ret
			}else{
				TCCR1A |= (1 << COM1B1);					//channelB no inverted
 1f8:	e0 e8       	ldi	r30, 0x80	; 128
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	80 62       	ori	r24, 0x20	; 32
 200:	80 83       	st	Z, r24
 202:	08 95       	ret

00000204 <initFastPWM1>:
/*Settings for Fast PWM 1, 16 bits, use it just one time
(inverted <- yes/nop, modePWM <- normal/settedUp, prescaler <- 1,8,64,256,1024)
*/
void initFastPWM1(uint8_t modePWM, uint16_t prescaler){
	//initialize register timer1
	TCCR1A = 0;			//Clean register 
 204:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0;
 208:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	switch (prescaler)
 20c:	68 30       	cpi	r22, 0x08	; 8
 20e:	71 05       	cpc	r23, r1
 210:	21 f0       	breq	.+8      	; 0x21a <initFastPWM1+0x16>
 212:	61 15       	cp	r22, r1
 214:	74 40       	sbci	r23, 0x04	; 4
 216:	39 f0       	breq	.+14     	; 0x226 <initFastPWM1+0x22>
 218:	0b c0       	rjmp	.+22     	; 0x230 <initFastPWM1+0x2c>
	{
		case 8:
			TCCR1B |= (1 << CS11);					//prescaler 8
 21a:	e1 e8       	ldi	r30, 0x81	; 129
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	90 81       	ld	r25, Z
 220:	92 60       	ori	r25, 0x02	; 2
 222:	90 83       	st	Z, r25
		break;
 224:	05 c0       	rjmp	.+10     	; 0x230 <initFastPWM1+0x2c>
		
		case 1024:
			TCCR1B |= (1 << CS10) | (1 << CS12);	//prescaler 1024
 226:	e1 e8       	ldi	r30, 0x81	; 129
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	90 81       	ld	r25, Z
 22c:	95 60       	ori	r25, 0x05	; 5
 22e:	90 83       	st	Z, r25
		break;
	}
	
	//selecting mode of operation
	switch (modePWM)
 230:	81 30       	cpi	r24, 0x01	; 1
 232:	19 f0       	breq	.+6      	; 0x23a <initFastPWM1+0x36>
 234:	82 30       	cpi	r24, 0x02	; 2
 236:	61 f0       	breq	.+24     	; 0x250 <initFastPWM1+0x4c>
 238:	08 95       	ret
	{
		case normal:		//fast pwm de 10 bits 
			//fast PWM 10-bit resolution
			TCCR1A |= (1 << WGM11) | (1 << WGM10);
 23a:	e0 e8       	ldi	r30, 0x80	; 128
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	83 60       	ori	r24, 0x03	; 3
 242:	80 83       	st	Z, r24
			TCCR1B |= (1 << WGM12);
 244:	e1 e8       	ldi	r30, 0x81	; 129
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	88 60       	ori	r24, 0x08	; 8
 24c:	80 83       	st	Z, r24
		break;
 24e:	08 95       	ret
		
		case settedUp:		//fast pwm con icr1 como top 
			//fast PWM with ICR1 as TOP
			TCCR1A |= (1 << WGM11);
 250:	e0 e8       	ldi	r30, 0x80	; 128
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	80 81       	ld	r24, Z
 256:	82 60       	ori	r24, 0x02	; 2
 258:	80 83       	st	Z, r24
			TCCR1B |= (1 << WGM12) | (1 << WGM13);
 25a:	e1 e8       	ldi	r30, 0x81	; 129
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	88 61       	ori	r24, 0x18	; 24
 262:	80 83       	st	Z, r24
			topVal = 1;		// bandera que permite usar icr1
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 26c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 270:	08 95       	ret

00000272 <topValue>:
	
}

//topValue, used if mode is settedUp
void topValue(uint16_t top){
	if (topVal == 1)	{
 272:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 276:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 27a:	21 30       	cpi	r18, 0x01	; 1
 27c:	31 05       	cpc	r19, r1
 27e:	29 f4       	brne	.+10     	; 0x28a <topValue+0x18>
		ICR1 = top;		//set top value
 280:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 284:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 288:	08 95       	ret
	}else{
		topVal = 0;		// ICR1 define el valor maximo del contador 
 28a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 28e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 292:	08 95       	ret

00000294 <convertServo>:

//conversion for servos, mapping values
void convertServo(uint16_t analogIn, uint8_t selChannel){
	// ADCH entrada analogica 8 bits
	// (200/12)
	switch(selChannel){
 294:	61 30       	cpi	r22, 0x01	; 1
 296:	19 f0       	breq	.+6      	; 0x29e <convertServo+0xa>
 298:	62 30       	cpi	r22, 0x02	; 2
 29a:	c9 f0       	breq	.+50     	; 0x2ce <convertServo+0x3a>
 29c:	08 95       	ret
		case 1:
			i = ADCH;
 29e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <i+0x1>
 2a8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <i>
			j = (200/12)*i+1000; // convierte un rango de 0-255 a 1000-2000
 2ac:	82 95       	swap	r24
 2ae:	92 95       	swap	r25
 2b0:	90 7f       	andi	r25, 0xF0	; 240
 2b2:	98 27       	eor	r25, r24
 2b4:	80 7f       	andi	r24, 0xF0	; 240
 2b6:	98 27       	eor	r25, r24
 2b8:	88 51       	subi	r24, 0x18	; 24
 2ba:	9c 4f       	sbci	r25, 0xFC	; 252
 2bc:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <j+0x1>
 2c0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <j>
			OCR1A = j;
 2c4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 2c8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		break;
 2cc:	08 95       	ret
		
		case 2:
			i = ADCH;
 2ce:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <i+0x1>
 2d8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <i>
			j = (200/12)*i+1000;
 2dc:	82 95       	swap	r24
 2de:	92 95       	swap	r25
 2e0:	90 7f       	andi	r25, 0xF0	; 240
 2e2:	98 27       	eor	r25, r24
 2e4:	80 7f       	andi	r24, 0xF0	; 240
 2e6:	98 27       	eor	r25, r24
 2e8:	88 51       	subi	r24, 0x18	; 24
 2ea:	9c 4f       	sbci	r25, 0xFC	; 252
 2ec:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <j+0x1>
 2f0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <j>
			OCR1B = j;
 2f4:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 2f8:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 2fc:	08 95       	ret

000002fe <initFastPWM2>:
// PWM2.c
#include "PWM2.h"

void initFastPWM2(uint8_t inverted, uint16_t prescaler){
	// Reset Timer2 control registers
	TCCR2A = 0;
 2fe:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 0;
 302:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>

	// Prescaler
	switch (prescaler) {
 306:	60 38       	cpi	r22, 0x80	; 128
 308:	71 05       	cpc	r23, r1
 30a:	99 f0       	breq	.+38     	; 0x332 <initFastPWM2+0x34>
 30c:	20 f4       	brcc	.+8      	; 0x316 <initFastPWM2+0x18>
 30e:	60 34       	cpi	r22, 0x40	; 64
 310:	71 05       	cpc	r23, r1
 312:	49 f0       	breq	.+18     	; 0x326 <initFastPWM2+0x28>
 314:	20 c0       	rjmp	.+64     	; 0x356 <initFastPWM2+0x58>
 316:	61 15       	cp	r22, r1
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	78 07       	cpc	r23, r24
 31c:	81 f0       	breq	.+32     	; 0x33e <initFastPWM2+0x40>
 31e:	61 15       	cp	r22, r1
 320:	74 40       	sbci	r23, 0x04	; 4
 322:	99 f0       	breq	.+38     	; 0x34a <initFastPWM2+0x4c>
 324:	18 c0       	rjmp	.+48     	; 0x356 <initFastPWM2+0x58>
		case 64:
		TCCR2B |= (1 << CS22); // clk/64
 326:	e1 eb       	ldi	r30, 0xB1	; 177
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	84 60       	ori	r24, 0x04	; 4
 32e:	80 83       	st	Z, r24
		break;
 330:	17 c0       	rjmp	.+46     	; 0x360 <initFastPWM2+0x62>
		case 128:
		TCCR2B |= (1 << CS22) | (1 << CS20); // clk/128
 332:	e1 eb       	ldi	r30, 0xB1	; 177
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	85 60       	ori	r24, 0x05	; 5
 33a:	80 83       	st	Z, r24
		break;
 33c:	11 c0       	rjmp	.+34     	; 0x360 <initFastPWM2+0x62>
		case 256:
		TCCR2B |= (1 << CS22) | (1 << CS21); // clk/256
 33e:	e1 eb       	ldi	r30, 0xB1	; 177
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	80 81       	ld	r24, Z
 344:	86 60       	ori	r24, 0x06	; 6
 346:	80 83       	st	Z, r24
		break;
 348:	0b c0       	rjmp	.+22     	; 0x360 <initFastPWM2+0x62>
		case 1024:
		TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20); // clk/1024
 34a:	e1 eb       	ldi	r30, 0xB1	; 177
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	80 81       	ld	r24, Z
 350:	87 60       	ori	r24, 0x07	; 7
 352:	80 83       	st	Z, r24
		break;
 354:	05 c0       	rjmp	.+10     	; 0x360 <initFastPWM2+0x62>
		default:
		TCCR2B |= (1 << CS22); // default to 64
 356:	e1 eb       	ldi	r30, 0xB1	; 177
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	80 81       	ld	r24, Z
 35c:	84 60       	ori	r24, 0x04	; 4
 35e:	80 83       	st	Z, r24
	}

	// Fast PWM mode (WGM2[2:0] = 011)
	TCCR2A |= (1 << WGM20) | (1 << WGM21);
 360:	e0 eb       	ldi	r30, 0xB0	; 176
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	80 81       	ld	r24, Z
 366:	83 60       	ori	r24, 0x03	; 3
 368:	80 83       	st	Z, r24
 36a:	08 95       	ret

0000036c <channel2>:
	// No forced output compare
	// Output pin config set in `channel2`
}

void channel2(uint8_t setChannel, uint8_t inverted){
	switch(setChannel){
 36c:	81 30       	cpi	r24, 0x01	; 1
 36e:	19 f0       	breq	.+6      	; 0x376 <channel2+0xa>
 370:	82 30       	cpi	r24, 0x02	; 2
 372:	91 f0       	breq	.+36     	; 0x398 <channel2+0x2c>
 374:	08 95       	ret
		case channelA:
		if(inverted){
 376:	66 23       	and	r22, r22
 378:	31 f0       	breq	.+12     	; 0x386 <channel2+0x1a>
			TCCR2A |= (1 << COM2A0) | (1 << COM2A1); // Inverted on OC2A (PB3)
 37a:	e0 eb       	ldi	r30, 0xB0	; 176
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	80 81       	ld	r24, Z
 380:	80 6c       	ori	r24, 0xC0	; 192
 382:	80 83       	st	Z, r24
 384:	05 c0       	rjmp	.+10     	; 0x390 <channel2+0x24>
			} else {
			TCCR2A |= (1 << COM2A1); // Non-inverted on OC2A
 386:	e0 eb       	ldi	r30, 0xB0	; 176
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	80 81       	ld	r24, Z
 38c:	80 68       	ori	r24, 0x80	; 128
 38e:	80 83       	st	Z, r24
		}
		DDRB |= (1 << PB3); // PB3 = OC2A = output
 390:	84 b1       	in	r24, 0x04	; 4
 392:	88 60       	ori	r24, 0x08	; 8
 394:	84 b9       	out	0x04, r24	; 4
		break;
 396:	08 95       	ret

		case channelB:
		if(inverted){
 398:	66 23       	and	r22, r22
 39a:	31 f0       	breq	.+12     	; 0x3a8 <channel2+0x3c>
			TCCR2A |= (1 << COM2B0) | (1 << COM2B1); // Inverted on OC2B (PD3)
 39c:	e0 eb       	ldi	r30, 0xB0	; 176
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	80 81       	ld	r24, Z
 3a2:	80 63       	ori	r24, 0x30	; 48
 3a4:	80 83       	st	Z, r24
 3a6:	05 c0       	rjmp	.+10     	; 0x3b2 <channel2+0x46>
			} else {
			TCCR2A |= (1 << COM2B1); // Non-inverted on OC2B
 3a8:	e0 eb       	ldi	r30, 0xB0	; 176
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	80 81       	ld	r24, Z
 3ae:	80 62       	ori	r24, 0x20	; 32
 3b0:	80 83       	st	Z, r24
		}
		DDRD |= (1 << PD3); // PD3 = OC2B = output
 3b2:	8a b1       	in	r24, 0x0a	; 10
 3b4:	88 60       	ori	r24, 0x08	; 8
 3b6:	8a b9       	out	0x0a, r24	; 10
 3b8:	08 95       	ret

000003ba <convertServo2>:
		break;
	}
}

void convertServo2(uint16_t analogIn, uint8_t selChannel){
 3ba:	cf 93       	push	r28
 3bc:	c6 2f       	mov	r28, r22
	uint8_t j;
	j = (uint8_t)(((200.0 / 1024.0) * analogIn) + 25); // Ajuste para servo (duty 5% a 10%)
 3be:	bc 01       	movw	r22, r24
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 9a 02 	call	0x534	; 0x534 <__floatunsisf>
 3c8:	20 e0       	ldi	r18, 0x00	; 0
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	48 e4       	ldi	r20, 0x48	; 72
 3ce:	5e e3       	ldi	r21, 0x3E	; 62
 3d0:	0e 94 28 03 	call	0x650	; 0x650 <__mulsf3>
 3d4:	20 e0       	ldi	r18, 0x00	; 0
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	48 ec       	ldi	r20, 0xC8	; 200
 3da:	51 e4       	ldi	r21, 0x41	; 65
 3dc:	0e 94 ff 01 	call	0x3fe	; 0x3fe <__addsf3>
 3e0:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__fixunssfsi>
	
	switch(selChannel){
 3e4:	c1 30       	cpi	r28, 0x01	; 1
 3e6:	19 f0       	breq	.+6      	; 0x3ee <convertServo2+0x34>
 3e8:	c2 30       	cpi	r28, 0x02	; 2
 3ea:	21 f0       	breq	.+8      	; 0x3f4 <convertServo2+0x3a>
 3ec:	05 c0       	rjmp	.+10     	; 0x3f8 <convertServo2+0x3e>
		case channelA:
		OCR2A = j;
 3ee:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
		break;
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <convertServo2+0x3e>
		case channelB:
		OCR2B = j;
 3f4:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
		break;
	}
 3f8:	cf 91       	pop	r28
 3fa:	08 95       	ret

000003fc <__subsf3>:
 3fc:	50 58       	subi	r21, 0x80	; 128

000003fe <__addsf3>:
 3fe:	bb 27       	eor	r27, r27
 400:	aa 27       	eor	r26, r26
 402:	0e 94 16 02 	call	0x42c	; 0x42c <__addsf3x>
 406:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <__fp_round>
 40a:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__fp_pscA>
 40e:	38 f0       	brcs	.+14     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 410:	0e 94 e7 02 	call	0x5ce	; 0x5ce <__fp_pscB>
 414:	20 f0       	brcs	.+8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 416:	39 f4       	brne	.+14     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 418:	9f 3f       	cpi	r25, 0xFF	; 255
 41a:	19 f4       	brne	.+6      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 41c:	26 f4       	brtc	.+8      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 41e:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__fp_nan>
 422:	0e f4       	brtc	.+2      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 424:	e0 95       	com	r30
 426:	e7 fb       	bst	r30, 7
 428:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__fp_inf>

0000042c <__addsf3x>:
 42c:	e9 2f       	mov	r30, r25
 42e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__fp_split3>
 432:	58 f3       	brcs	.-42     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 434:	ba 17       	cp	r27, r26
 436:	62 07       	cpc	r22, r18
 438:	73 07       	cpc	r23, r19
 43a:	84 07       	cpc	r24, r20
 43c:	95 07       	cpc	r25, r21
 43e:	20 f0       	brcs	.+8      	; 0x448 <__addsf3x+0x1c>
 440:	79 f4       	brne	.+30     	; 0x460 <__addsf3x+0x34>
 442:	a6 f5       	brtc	.+104    	; 0x4ac <__addsf3x+0x80>
 444:	0c 94 21 03 	jmp	0x642	; 0x642 <__fp_zero>
 448:	0e f4       	brtc	.+2      	; 0x44c <__addsf3x+0x20>
 44a:	e0 95       	com	r30
 44c:	0b 2e       	mov	r0, r27
 44e:	ba 2f       	mov	r27, r26
 450:	a0 2d       	mov	r26, r0
 452:	0b 01       	movw	r0, r22
 454:	b9 01       	movw	r22, r18
 456:	90 01       	movw	r18, r0
 458:	0c 01       	movw	r0, r24
 45a:	ca 01       	movw	r24, r20
 45c:	a0 01       	movw	r20, r0
 45e:	11 24       	eor	r1, r1
 460:	ff 27       	eor	r31, r31
 462:	59 1b       	sub	r21, r25
 464:	99 f0       	breq	.+38     	; 0x48c <__addsf3x+0x60>
 466:	59 3f       	cpi	r21, 0xF9	; 249
 468:	50 f4       	brcc	.+20     	; 0x47e <__addsf3x+0x52>
 46a:	50 3e       	cpi	r21, 0xE0	; 224
 46c:	68 f1       	brcs	.+90     	; 0x4c8 <__addsf3x+0x9c>
 46e:	1a 16       	cp	r1, r26
 470:	f0 40       	sbci	r31, 0x00	; 0
 472:	a2 2f       	mov	r26, r18
 474:	23 2f       	mov	r18, r19
 476:	34 2f       	mov	r19, r20
 478:	44 27       	eor	r20, r20
 47a:	58 5f       	subi	r21, 0xF8	; 248
 47c:	f3 cf       	rjmp	.-26     	; 0x464 <__addsf3x+0x38>
 47e:	46 95       	lsr	r20
 480:	37 95       	ror	r19
 482:	27 95       	ror	r18
 484:	a7 95       	ror	r26
 486:	f0 40       	sbci	r31, 0x00	; 0
 488:	53 95       	inc	r21
 48a:	c9 f7       	brne	.-14     	; 0x47e <__addsf3x+0x52>
 48c:	7e f4       	brtc	.+30     	; 0x4ac <__addsf3x+0x80>
 48e:	1f 16       	cp	r1, r31
 490:	ba 0b       	sbc	r27, r26
 492:	62 0b       	sbc	r22, r18
 494:	73 0b       	sbc	r23, r19
 496:	84 0b       	sbc	r24, r20
 498:	ba f0       	brmi	.+46     	; 0x4c8 <__addsf3x+0x9c>
 49a:	91 50       	subi	r25, 0x01	; 1
 49c:	a1 f0       	breq	.+40     	; 0x4c6 <__addsf3x+0x9a>
 49e:	ff 0f       	add	r31, r31
 4a0:	bb 1f       	adc	r27, r27
 4a2:	66 1f       	adc	r22, r22
 4a4:	77 1f       	adc	r23, r23
 4a6:	88 1f       	adc	r24, r24
 4a8:	c2 f7       	brpl	.-16     	; 0x49a <__addsf3x+0x6e>
 4aa:	0e c0       	rjmp	.+28     	; 0x4c8 <__addsf3x+0x9c>
 4ac:	ba 0f       	add	r27, r26
 4ae:	62 1f       	adc	r22, r18
 4b0:	73 1f       	adc	r23, r19
 4b2:	84 1f       	adc	r24, r20
 4b4:	48 f4       	brcc	.+18     	; 0x4c8 <__addsf3x+0x9c>
 4b6:	87 95       	ror	r24
 4b8:	77 95       	ror	r23
 4ba:	67 95       	ror	r22
 4bc:	b7 95       	ror	r27
 4be:	f7 95       	ror	r31
 4c0:	9e 3f       	cpi	r25, 0xFE	; 254
 4c2:	08 f0       	brcs	.+2      	; 0x4c6 <__addsf3x+0x9a>
 4c4:	b0 cf       	rjmp	.-160    	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 4c6:	93 95       	inc	r25
 4c8:	88 0f       	add	r24, r24
 4ca:	08 f0       	brcs	.+2      	; 0x4ce <__addsf3x+0xa2>
 4cc:	99 27       	eor	r25, r25
 4ce:	ee 0f       	add	r30, r30
 4d0:	97 95       	ror	r25
 4d2:	87 95       	ror	r24
 4d4:	08 95       	ret

000004d6 <__fixunssfsi>:
 4d6:	0e 94 07 03 	call	0x60e	; 0x60e <__fp_splitA>
 4da:	88 f0       	brcs	.+34     	; 0x4fe <__fixunssfsi+0x28>
 4dc:	9f 57       	subi	r25, 0x7F	; 127
 4de:	98 f0       	brcs	.+38     	; 0x506 <__fixunssfsi+0x30>
 4e0:	b9 2f       	mov	r27, r25
 4e2:	99 27       	eor	r25, r25
 4e4:	b7 51       	subi	r27, 0x17	; 23
 4e6:	b0 f0       	brcs	.+44     	; 0x514 <__fixunssfsi+0x3e>
 4e8:	e1 f0       	breq	.+56     	; 0x522 <__fixunssfsi+0x4c>
 4ea:	66 0f       	add	r22, r22
 4ec:	77 1f       	adc	r23, r23
 4ee:	88 1f       	adc	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	1a f0       	brmi	.+6      	; 0x4fa <__fixunssfsi+0x24>
 4f4:	ba 95       	dec	r27
 4f6:	c9 f7       	brne	.-14     	; 0x4ea <__fixunssfsi+0x14>
 4f8:	14 c0       	rjmp	.+40     	; 0x522 <__fixunssfsi+0x4c>
 4fa:	b1 30       	cpi	r27, 0x01	; 1
 4fc:	91 f0       	breq	.+36     	; 0x522 <__fixunssfsi+0x4c>
 4fe:	0e 94 21 03 	call	0x642	; 0x642 <__fp_zero>
 502:	b1 e0       	ldi	r27, 0x01	; 1
 504:	08 95       	ret
 506:	0c 94 21 03 	jmp	0x642	; 0x642 <__fp_zero>
 50a:	67 2f       	mov	r22, r23
 50c:	78 2f       	mov	r23, r24
 50e:	88 27       	eor	r24, r24
 510:	b8 5f       	subi	r27, 0xF8	; 248
 512:	39 f0       	breq	.+14     	; 0x522 <__fixunssfsi+0x4c>
 514:	b9 3f       	cpi	r27, 0xF9	; 249
 516:	cc f3       	brlt	.-14     	; 0x50a <__fixunssfsi+0x34>
 518:	86 95       	lsr	r24
 51a:	77 95       	ror	r23
 51c:	67 95       	ror	r22
 51e:	b3 95       	inc	r27
 520:	d9 f7       	brne	.-10     	; 0x518 <__fixunssfsi+0x42>
 522:	3e f4       	brtc	.+14     	; 0x532 <__fixunssfsi+0x5c>
 524:	90 95       	com	r25
 526:	80 95       	com	r24
 528:	70 95       	com	r23
 52a:	61 95       	neg	r22
 52c:	7f 4f       	sbci	r23, 0xFF	; 255
 52e:	8f 4f       	sbci	r24, 0xFF	; 255
 530:	9f 4f       	sbci	r25, 0xFF	; 255
 532:	08 95       	ret

00000534 <__floatunsisf>:
 534:	e8 94       	clt
 536:	09 c0       	rjmp	.+18     	; 0x54a <__floatsisf+0x12>

00000538 <__floatsisf>:
 538:	97 fb       	bst	r25, 7
 53a:	3e f4       	brtc	.+14     	; 0x54a <__floatsisf+0x12>
 53c:	90 95       	com	r25
 53e:	80 95       	com	r24
 540:	70 95       	com	r23
 542:	61 95       	neg	r22
 544:	7f 4f       	sbci	r23, 0xFF	; 255
 546:	8f 4f       	sbci	r24, 0xFF	; 255
 548:	9f 4f       	sbci	r25, 0xFF	; 255
 54a:	99 23       	and	r25, r25
 54c:	a9 f0       	breq	.+42     	; 0x578 <__floatsisf+0x40>
 54e:	f9 2f       	mov	r31, r25
 550:	96 e9       	ldi	r25, 0x96	; 150
 552:	bb 27       	eor	r27, r27
 554:	93 95       	inc	r25
 556:	f6 95       	lsr	r31
 558:	87 95       	ror	r24
 55a:	77 95       	ror	r23
 55c:	67 95       	ror	r22
 55e:	b7 95       	ror	r27
 560:	f1 11       	cpse	r31, r1
 562:	f8 cf       	rjmp	.-16     	; 0x554 <__floatsisf+0x1c>
 564:	fa f4       	brpl	.+62     	; 0x5a4 <__floatsisf+0x6c>
 566:	bb 0f       	add	r27, r27
 568:	11 f4       	brne	.+4      	; 0x56e <__floatsisf+0x36>
 56a:	60 ff       	sbrs	r22, 0
 56c:	1b c0       	rjmp	.+54     	; 0x5a4 <__floatsisf+0x6c>
 56e:	6f 5f       	subi	r22, 0xFF	; 255
 570:	7f 4f       	sbci	r23, 0xFF	; 255
 572:	8f 4f       	sbci	r24, 0xFF	; 255
 574:	9f 4f       	sbci	r25, 0xFF	; 255
 576:	16 c0       	rjmp	.+44     	; 0x5a4 <__floatsisf+0x6c>
 578:	88 23       	and	r24, r24
 57a:	11 f0       	breq	.+4      	; 0x580 <__floatsisf+0x48>
 57c:	96 e9       	ldi	r25, 0x96	; 150
 57e:	11 c0       	rjmp	.+34     	; 0x5a2 <__floatsisf+0x6a>
 580:	77 23       	and	r23, r23
 582:	21 f0       	breq	.+8      	; 0x58c <__floatsisf+0x54>
 584:	9e e8       	ldi	r25, 0x8E	; 142
 586:	87 2f       	mov	r24, r23
 588:	76 2f       	mov	r23, r22
 58a:	05 c0       	rjmp	.+10     	; 0x596 <__floatsisf+0x5e>
 58c:	66 23       	and	r22, r22
 58e:	71 f0       	breq	.+28     	; 0x5ac <__floatsisf+0x74>
 590:	96 e8       	ldi	r25, 0x86	; 134
 592:	86 2f       	mov	r24, r22
 594:	70 e0       	ldi	r23, 0x00	; 0
 596:	60 e0       	ldi	r22, 0x00	; 0
 598:	2a f0       	brmi	.+10     	; 0x5a4 <__floatsisf+0x6c>
 59a:	9a 95       	dec	r25
 59c:	66 0f       	add	r22, r22
 59e:	77 1f       	adc	r23, r23
 5a0:	88 1f       	adc	r24, r24
 5a2:	da f7       	brpl	.-10     	; 0x59a <__floatsisf+0x62>
 5a4:	88 0f       	add	r24, r24
 5a6:	96 95       	lsr	r25
 5a8:	87 95       	ror	r24
 5aa:	97 f9       	bld	r25, 7
 5ac:	08 95       	ret

000005ae <__fp_inf>:
 5ae:	97 f9       	bld	r25, 7
 5b0:	9f 67       	ori	r25, 0x7F	; 127
 5b2:	80 e8       	ldi	r24, 0x80	; 128
 5b4:	70 e0       	ldi	r23, 0x00	; 0
 5b6:	60 e0       	ldi	r22, 0x00	; 0
 5b8:	08 95       	ret

000005ba <__fp_nan>:
 5ba:	9f ef       	ldi	r25, 0xFF	; 255
 5bc:	80 ec       	ldi	r24, 0xC0	; 192
 5be:	08 95       	ret

000005c0 <__fp_pscA>:
 5c0:	00 24       	eor	r0, r0
 5c2:	0a 94       	dec	r0
 5c4:	16 16       	cp	r1, r22
 5c6:	17 06       	cpc	r1, r23
 5c8:	18 06       	cpc	r1, r24
 5ca:	09 06       	cpc	r0, r25
 5cc:	08 95       	ret

000005ce <__fp_pscB>:
 5ce:	00 24       	eor	r0, r0
 5d0:	0a 94       	dec	r0
 5d2:	12 16       	cp	r1, r18
 5d4:	13 06       	cpc	r1, r19
 5d6:	14 06       	cpc	r1, r20
 5d8:	05 06       	cpc	r0, r21
 5da:	08 95       	ret

000005dc <__fp_round>:
 5dc:	09 2e       	mov	r0, r25
 5de:	03 94       	inc	r0
 5e0:	00 0c       	add	r0, r0
 5e2:	11 f4       	brne	.+4      	; 0x5e8 <__fp_round+0xc>
 5e4:	88 23       	and	r24, r24
 5e6:	52 f0       	brmi	.+20     	; 0x5fc <__fp_round+0x20>
 5e8:	bb 0f       	add	r27, r27
 5ea:	40 f4       	brcc	.+16     	; 0x5fc <__fp_round+0x20>
 5ec:	bf 2b       	or	r27, r31
 5ee:	11 f4       	brne	.+4      	; 0x5f4 <__fp_round+0x18>
 5f0:	60 ff       	sbrs	r22, 0
 5f2:	04 c0       	rjmp	.+8      	; 0x5fc <__fp_round+0x20>
 5f4:	6f 5f       	subi	r22, 0xFF	; 255
 5f6:	7f 4f       	sbci	r23, 0xFF	; 255
 5f8:	8f 4f       	sbci	r24, 0xFF	; 255
 5fa:	9f 4f       	sbci	r25, 0xFF	; 255
 5fc:	08 95       	ret

000005fe <__fp_split3>:
 5fe:	57 fd       	sbrc	r21, 7
 600:	90 58       	subi	r25, 0x80	; 128
 602:	44 0f       	add	r20, r20
 604:	55 1f       	adc	r21, r21
 606:	59 f0       	breq	.+22     	; 0x61e <__fp_splitA+0x10>
 608:	5f 3f       	cpi	r21, 0xFF	; 255
 60a:	71 f0       	breq	.+28     	; 0x628 <__fp_splitA+0x1a>
 60c:	47 95       	ror	r20

0000060e <__fp_splitA>:
 60e:	88 0f       	add	r24, r24
 610:	97 fb       	bst	r25, 7
 612:	99 1f       	adc	r25, r25
 614:	61 f0       	breq	.+24     	; 0x62e <__fp_splitA+0x20>
 616:	9f 3f       	cpi	r25, 0xFF	; 255
 618:	79 f0       	breq	.+30     	; 0x638 <__fp_splitA+0x2a>
 61a:	87 95       	ror	r24
 61c:	08 95       	ret
 61e:	12 16       	cp	r1, r18
 620:	13 06       	cpc	r1, r19
 622:	14 06       	cpc	r1, r20
 624:	55 1f       	adc	r21, r21
 626:	f2 cf       	rjmp	.-28     	; 0x60c <__fp_split3+0xe>
 628:	46 95       	lsr	r20
 62a:	f1 df       	rcall	.-30     	; 0x60e <__fp_splitA>
 62c:	08 c0       	rjmp	.+16     	; 0x63e <__fp_splitA+0x30>
 62e:	16 16       	cp	r1, r22
 630:	17 06       	cpc	r1, r23
 632:	18 06       	cpc	r1, r24
 634:	99 1f       	adc	r25, r25
 636:	f1 cf       	rjmp	.-30     	; 0x61a <__fp_splitA+0xc>
 638:	86 95       	lsr	r24
 63a:	71 05       	cpc	r23, r1
 63c:	61 05       	cpc	r22, r1
 63e:	08 94       	sec
 640:	08 95       	ret

00000642 <__fp_zero>:
 642:	e8 94       	clt

00000644 <__fp_szero>:
 644:	bb 27       	eor	r27, r27
 646:	66 27       	eor	r22, r22
 648:	77 27       	eor	r23, r23
 64a:	cb 01       	movw	r24, r22
 64c:	97 f9       	bld	r25, 7
 64e:	08 95       	ret

00000650 <__mulsf3>:
 650:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3x>
 654:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <__fp_round>
 658:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__fp_pscA>
 65c:	38 f0       	brcs	.+14     	; 0x66c <__mulsf3+0x1c>
 65e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <__fp_pscB>
 662:	20 f0       	brcs	.+8      	; 0x66c <__mulsf3+0x1c>
 664:	95 23       	and	r25, r21
 666:	11 f0       	breq	.+4      	; 0x66c <__mulsf3+0x1c>
 668:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__fp_inf>
 66c:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__fp_nan>
 670:	11 24       	eor	r1, r1
 672:	0c 94 22 03 	jmp	0x644	; 0x644 <__fp_szero>

00000676 <__mulsf3x>:
 676:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__fp_split3>
 67a:	70 f3       	brcs	.-36     	; 0x658 <__mulsf3+0x8>

0000067c <__mulsf3_pse>:
 67c:	95 9f       	mul	r25, r21
 67e:	c1 f3       	breq	.-16     	; 0x670 <__mulsf3+0x20>
 680:	95 0f       	add	r25, r21
 682:	50 e0       	ldi	r21, 0x00	; 0
 684:	55 1f       	adc	r21, r21
 686:	62 9f       	mul	r22, r18
 688:	f0 01       	movw	r30, r0
 68a:	72 9f       	mul	r23, r18
 68c:	bb 27       	eor	r27, r27
 68e:	f0 0d       	add	r31, r0
 690:	b1 1d       	adc	r27, r1
 692:	63 9f       	mul	r22, r19
 694:	aa 27       	eor	r26, r26
 696:	f0 0d       	add	r31, r0
 698:	b1 1d       	adc	r27, r1
 69a:	aa 1f       	adc	r26, r26
 69c:	64 9f       	mul	r22, r20
 69e:	66 27       	eor	r22, r22
 6a0:	b0 0d       	add	r27, r0
 6a2:	a1 1d       	adc	r26, r1
 6a4:	66 1f       	adc	r22, r22
 6a6:	82 9f       	mul	r24, r18
 6a8:	22 27       	eor	r18, r18
 6aa:	b0 0d       	add	r27, r0
 6ac:	a1 1d       	adc	r26, r1
 6ae:	62 1f       	adc	r22, r18
 6b0:	73 9f       	mul	r23, r19
 6b2:	b0 0d       	add	r27, r0
 6b4:	a1 1d       	adc	r26, r1
 6b6:	62 1f       	adc	r22, r18
 6b8:	83 9f       	mul	r24, r19
 6ba:	a0 0d       	add	r26, r0
 6bc:	61 1d       	adc	r22, r1
 6be:	22 1f       	adc	r18, r18
 6c0:	74 9f       	mul	r23, r20
 6c2:	33 27       	eor	r19, r19
 6c4:	a0 0d       	add	r26, r0
 6c6:	61 1d       	adc	r22, r1
 6c8:	23 1f       	adc	r18, r19
 6ca:	84 9f       	mul	r24, r20
 6cc:	60 0d       	add	r22, r0
 6ce:	21 1d       	adc	r18, r1
 6d0:	82 2f       	mov	r24, r18
 6d2:	76 2f       	mov	r23, r22
 6d4:	6a 2f       	mov	r22, r26
 6d6:	11 24       	eor	r1, r1
 6d8:	9f 57       	subi	r25, 0x7F	; 127
 6da:	50 40       	sbci	r21, 0x00	; 0
 6dc:	9a f0       	brmi	.+38     	; 0x704 <__mulsf3_pse+0x88>
 6de:	f1 f0       	breq	.+60     	; 0x71c <__mulsf3_pse+0xa0>
 6e0:	88 23       	and	r24, r24
 6e2:	4a f0       	brmi	.+18     	; 0x6f6 <__mulsf3_pse+0x7a>
 6e4:	ee 0f       	add	r30, r30
 6e6:	ff 1f       	adc	r31, r31
 6e8:	bb 1f       	adc	r27, r27
 6ea:	66 1f       	adc	r22, r22
 6ec:	77 1f       	adc	r23, r23
 6ee:	88 1f       	adc	r24, r24
 6f0:	91 50       	subi	r25, 0x01	; 1
 6f2:	50 40       	sbci	r21, 0x00	; 0
 6f4:	a9 f7       	brne	.-22     	; 0x6e0 <__mulsf3_pse+0x64>
 6f6:	9e 3f       	cpi	r25, 0xFE	; 254
 6f8:	51 05       	cpc	r21, r1
 6fa:	80 f0       	brcs	.+32     	; 0x71c <__mulsf3_pse+0xa0>
 6fc:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__fp_inf>
 700:	0c 94 22 03 	jmp	0x644	; 0x644 <__fp_szero>
 704:	5f 3f       	cpi	r21, 0xFF	; 255
 706:	e4 f3       	brlt	.-8      	; 0x700 <__mulsf3_pse+0x84>
 708:	98 3e       	cpi	r25, 0xE8	; 232
 70a:	d4 f3       	brlt	.-12     	; 0x700 <__mulsf3_pse+0x84>
 70c:	86 95       	lsr	r24
 70e:	77 95       	ror	r23
 710:	67 95       	ror	r22
 712:	b7 95       	ror	r27
 714:	f7 95       	ror	r31
 716:	e7 95       	ror	r30
 718:	9f 5f       	subi	r25, 0xFF	; 255
 71a:	c1 f7       	brne	.-16     	; 0x70c <__mulsf3_pse+0x90>
 71c:	fe 2b       	or	r31, r30
 71e:	88 0f       	add	r24, r24
 720:	91 1d       	adc	r25, r1
 722:	96 95       	lsr	r25
 724:	87 95       	ror	r24
 726:	97 f9       	bld	r25, 7
 728:	08 95       	ret

0000072a <_exit>:
 72a:	f8 94       	cli

0000072c <__stop_program>:
 72c:	ff cf       	rjmp	.-2      	; 0x72c <__stop_program>
