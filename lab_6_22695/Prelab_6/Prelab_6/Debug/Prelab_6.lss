
Prelab_6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00000182  00000216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000182  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800138  00800138  0000024e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000024e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007d0  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006db  00000000  00000000  00000ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d5  00000000  00000000  000011b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00001488  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d4  00000000  00000000  0000151c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ee  00000000  00000000  000018f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000019de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 af 00 	jmp	0x15e	; 0x15e <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e8       	ldi	r30, 0x82	; 130
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 33       	cpi	r26, 0x38	; 56
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e3       	ldi	r26, 0x38	; 56
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 33       	cpi	r26, 0x39	; 57
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  9e:	0c 94 bf 00 	jmp	0x17e	; 0x17e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ConfigurarUART9600>:
}

void ConfigurarUART9600(void)
{
	// Configurar pines: PD0(RX) como entrada, PD1(TX) como salida
	DDRD &= ~(1<<DDD0);
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8e 7f       	andi	r24, 0xFE	; 254
  aa:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1);
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	8a b9       	out	0x0a, r24	; 10
	
	// Configurar UART
	UCSR0A = 0; // Limpiar registro de estado
  b2:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = (1<<RXCIE0) | (1<<RXEN0) | (1<<TXEN0); // Habilitar interrupciones RX, TX y RX
  b6:	88 e9       	ldi	r24, 0x98	; 152
  b8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); // Modo 8 bits, sin paridad, 1 bit de stop
  bc:	86 e0       	ldi	r24, 0x06	; 6
  be:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	// Configurar baud rate (9600 a 16MHz)
	UBRR0 = 103;
  c2:	87 e6       	ldi	r24, 0x67	; 103
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ca:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  ce:	08 95       	ret

000000d0 <EnviarCaracterUART>:
}

void EnviarCaracterUART(char caracter)
{
	while(!(UCSR0A & (1<<UDRE0))); // Esperar buffer de transmisión vacío
  d0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  d4:	95 ff       	sbrs	r25, 5
  d6:	fc cf       	rjmp	.-8      	; 0xd0 <EnviarCaracterUART>
	UDR0 = caracter;
  d8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  dc:	08 95       	ret

000000de <EnviarTextoUART>:
}

void EnviarTextoUART(char *texto)
{
  de:	0f 93       	push	r16
  e0:	1f 93       	push	r17
  e2:	cf 93       	push	r28
  e4:	8c 01       	movw	r16, r24
	uint8_t i = 0;
  e6:	c0 e0       	ldi	r28, 0x00	; 0
	while(texto[i] != '\0') {
  e8:	03 c0       	rjmp	.+6      	; 0xf0 <EnviarTextoUART+0x12>
		EnviarCaracterUART(texto[i]);
  ea:	0e 94 68 00 	call	0xd0	; 0xd0 <EnviarCaracterUART>
		i++;
  ee:	cf 5f       	subi	r28, 0xFF	; 255
}

void EnviarTextoUART(char *texto)
{
	uint8_t i = 0;
	while(texto[i] != '\0') {
  f0:	f8 01       	movw	r30, r16
  f2:	ec 0f       	add	r30, r28
  f4:	f1 1d       	adc	r31, r1
  f6:	80 81       	ld	r24, Z
  f8:	81 11       	cpse	r24, r1
  fa:	f7 cf       	rjmp	.-18     	; 0xea <EnviarTextoUART+0xc>
		EnviarCaracterUART(texto[i]);
		i++;
	}
}
  fc:	cf 91       	pop	r28
  fe:	1f 91       	pop	r17
 100:	0f 91       	pop	r16
 102:	08 95       	ret

00000104 <MostrarEnPuertos>:

void MostrarEnPuertos(uint8_t dato)
{
	// Mostrar en puertos según tu configuración original:
	PORTD = (dato & 0x3F) << 2;  // 6 bits menos significativos en PD7-PD2 (desplazados 2 posiciones)
 104:	28 2f       	mov	r18, r24
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	22 0f       	add	r18, r18
 10a:	33 1f       	adc	r19, r19
 10c:	22 0f       	add	r18, r18
 10e:	33 1f       	adc	r19, r19
 110:	2b b9       	out	0x0b, r18	; 11
	PORTB = (dato >> 6) & 0x03;  // 2 bits más significativos en PB1-PB0
 112:	82 95       	swap	r24
 114:	86 95       	lsr	r24
 116:	86 95       	lsr	r24
 118:	83 70       	andi	r24, 0x03	; 3
 11a:	85 b9       	out	0x05, r24	; 5
 11c:	08 95       	ret

0000011e <main>:
volatile uint8_t datoRecibido = 0;

int main(void)
{
	// Configurar puertos como salida
	DDRB = 0xFF;  // Puerto B completo como salida
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xFF;  // Puerto D completo como salida
 122:	8a b9       	out	0x0a, r24	; 10
	
	// Configurar UART - llamar funcion 
	ConfigurarUART9600();
 124:	0e 94 53 00 	call	0xa6	; 0xa6 <ConfigurarUART9600>
	
	// Habilitar interrupciones globales
	sei();
 128:	78 94       	sei
	
	// Mensaje inicial
	EnviarTextoUART("\nInicio de Transmision \n");
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	0e 94 6f 00 	call	0xde	; 0xde <EnviarTextoUART>
	
	
	while (1)
	{
		if(datoRecibido != 0) {
 132:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
 136:	88 23       	and	r24, r24
 138:	e1 f3       	breq	.-8      	; 0x132 <main+0x14>
			// Mostrar el dato recibido en los puertos
			MostrarEnPuertos(datoRecibido);
 13a:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
 13e:	0e 94 82 00 	call	0x104	; 0x104 <MostrarEnPuertos>
			
			// Opcional: Enviar confirmación por UART
			EnviarTextoUART("Caracter mostrado en puertos: ");
 142:	89 e1       	ldi	r24, 0x19	; 25
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	0e 94 6f 00 	call	0xde	; 0xde <EnviarTextoUART>
			EnviarCaracterUART(datoRecibido);
 14a:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
 14e:	0e 94 68 00 	call	0xd0	; 0xd0 <EnviarCaracterUART>
			EnviarCaracterUART(SALTO_LINEA);
 152:	8a e0       	ldi	r24, 0x0A	; 10
 154:	0e 94 68 00 	call	0xd0	; 0xd0 <EnviarCaracterUART>
			
			datoRecibido = 0; // Resetear el dato
 158:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <__data_end>
 15c:	ea cf       	rjmp	.-44     	; 0x132 <main+0x14>

0000015e <__vector_18>:
	PORTB = (dato >> 6) & 0x03;  // 2 bits más significativos en PB1-PB0
}

// Interrupción por recepción UART
ISR(USART_RX_vect)
{
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	8f 93       	push	r24
	datoRecibido = UDR0; // Almacenar el dato recibido
 16a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 16e:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <__data_end>
 172:	8f 91       	pop	r24
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <_exit>:
 17e:	f8 94       	cli

00000180 <__stop_program>:
 180:	ff cf       	rjmp	.-2      	; 0x180 <__stop_program>
