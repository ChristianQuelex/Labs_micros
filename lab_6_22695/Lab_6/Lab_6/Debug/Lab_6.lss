
Lab_6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b8  00800100  000001e0  00000274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  008001b8  008001b8  0000032c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000035c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008f8  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000775  00000000  00000000  00000cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ca  00000000  00000000  00001451  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  0000181c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000408  00000000  00000000  000018b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000013c  00000000  00000000  00001cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001df4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ee       	ldi	r30, 0xE0	; 224
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 3b       	cpi	r26, 0xB8	; 184
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 eb       	ldi	r26, 0xB8	; 184
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 3b       	cpi	r26, 0xB9	; 185
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 92 00 	call	0x124	; 0x124 <main>
  9e:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ConfigurarUART9600>:
	}
}

void ConfigurarUART9600(void)
{
	DDRD &= ~(1<<DDD0);  // PD0 (RX) como entrada
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8e 7f       	andi	r24, 0xFE	; 254
  aa:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1);   // PD1 (TX) como salida
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	8a b9       	out	0x0a, r24	; 10
	UBRR0 = 103;         // 9600 bps a 16MHz
  b2:	87 e6       	ldi	r24, 0x67	; 103
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ba:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0A = 0;
  be:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
  c2:	88 e9       	ldi	r24, 0x98	; 152
  c4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
  c8:	86 e0       	ldi	r24, 0x06	; 6
  ca:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  ce:	08 95       	ret

000000d0 <EnviarCaracterUART>:
}

void EnviarCaracterUART(char c)
{
	while(!(UCSR0A & (1<<UDRE0)));
  d0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  d4:	95 ff       	sbrs	r25, 5
  d6:	fc cf       	rjmp	.-8      	; 0xd0 <EnviarCaracterUART>
	UDR0 = c;
  d8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  dc:	08 95       	ret

000000de <cadena>:
}

void cadena(char txt[])
{
  de:	0f 93       	push	r16
  e0:	1f 93       	push	r17
  e2:	cf 93       	push	r28
  e4:	8c 01       	movw	r16, r24
	uint8_t i = 0;
  e6:	c0 e0       	ldi	r28, 0x00	; 0
	while(txt[i] != '\0')
  e8:	03 c0       	rjmp	.+6      	; 0xf0 <cadena+0x12>
	{
		EnviarCaracterUART(txt[i]);
  ea:	0e 94 68 00 	call	0xd0	; 0xd0 <EnviarCaracterUART>
		i++;
  ee:	cf 5f       	subi	r28, 0xFF	; 255
}

void cadena(char txt[])
{
	uint8_t i = 0;
	while(txt[i] != '\0')
  f0:	f8 01       	movw	r30, r16
  f2:	ec 0f       	add	r30, r28
  f4:	f1 1d       	adc	r31, r1
  f6:	80 81       	ld	r24, Z
  f8:	81 11       	cpse	r24, r1
  fa:	f7 cf       	rjmp	.-18     	; 0xea <cadena+0xc>
	{
		EnviarCaracterUART(txt[i]);
		i++;
	}
}
  fc:	cf 91       	pop	r28
  fe:	1f 91       	pop	r17
 100:	0f 91       	pop	r16
 102:	08 95       	ret

00000104 <MostrarEnPuertos>:

// Función modificada para PD2-PD7
void MostrarEnPuertos(uint8_t dato)
{
	// PD7-PD2 = bits [5:0] del dato (6 bits LSB)
	PORTD = (dato & 0x3F) << 2;
 104:	28 2f       	mov	r18, r24
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	22 0f       	add	r18, r18
 10a:	33 1f       	adc	r19, r19
 10c:	22 0f       	add	r18, r18
 10e:	33 1f       	adc	r19, r19
 110:	2b b9       	out	0x0b, r18	; 11
	
	// PB1-PB0 = bits [7:6] del dato (2 bits MSB)
	PORTB = (dato >> 6) & 0x03;
 112:	82 95       	swap	r24
 114:	86 95       	lsr	r24
 116:	86 95       	lsr	r24
 118:	83 70       	andi	r24, 0x03	; 3
 11a:	85 b9       	out	0x05, r24	; 5
	
	// Mantener PD1 (TX) y PD0 (RX) sin cambios
	PORTD |= (1<<PD1);  // Mantener TX en estado alto
 11c:	8b b1       	in	r24, 0x0b	; 11
 11e:	82 60       	ori	r24, 0x02	; 2
 120:	8b b9       	out	0x0b, r24	; 11
 122:	08 95       	ret

00000124 <main>:
volatile uint8_t datoRecibido = 0;

int main(void)
{
	// Configurar puertos (PB y PD como salidas)
	DDRB = 0xFF;
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xFF;
 128:	8a b9       	out	0x0a, r24	; 10
	
	// Inicializar UART
	ConfigurarUART9600();
 12a:	0e 94 53 00 	call	0xa6	; 0xa6 <ConfigurarUART9600>
	sei();
 12e:	78 94       	sei
	
	// Mensaje inicial
	cadena("\nSistema UART - Visualizacion en PD2-PD7\n");
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	91 e0       	ldi	r25, 0x01	; 1
 134:	0e 94 6f 00 	call	0xde	; 0xde <cadena>
	cadena("Envie caracteres para verlos en:\n");
 138:	8a e2       	ldi	r24, 0x2A	; 42
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	0e 94 6f 00 	call	0xde	; 0xde <cadena>
	cadena("- PB1-PB0: 2 bits mas significativos\n");
 140:	8c e4       	ldi	r24, 0x4C	; 76
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	0e 94 6f 00 	call	0xde	; 0xde <cadena>
	cadena("- PD7-PD2: 6 bits menos significativos\n\n");
 148:	82 e7       	ldi	r24, 0x72	; 114
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	0e 94 6f 00 	call	0xde	; 0xde <cadena>
	
	while(1)
	{
		if(datoRecibido)
 150:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <__data_end>
 154:	88 23       	and	r24, r24
 156:	59 f1       	breq	.+86     	; 0x1ae <main+0x8a>
		{
			MostrarEnPuertos(datoRecibido);
 158:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <__data_end>
 15c:	0e 94 82 00 	call	0x104	; 0x104 <MostrarEnPuertos>
			
			// Confirmación del dato recibido
			cadena("Caracter recibido: ");
 160:	8b e9       	ldi	r24, 0x9B	; 155
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	0e 94 6f 00 	call	0xde	; 0xde <cadena>
			EnviarCaracterUART(datoRecibido);
 168:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <__data_end>
 16c:	0e 94 68 00 	call	0xd0	; 0xd0 <EnviarCaracterUART>
			cadena(" (0x");
 170:	8f ea       	ldi	r24, 0xAF	; 175
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	0e 94 6f 00 	call	0xde	; 0xde <cadena>
			// Mostrar valor hexadecimal
			uint8_t nibble = (datoRecibido >> 4) & 0x0F;
 178:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <__data_end>
 17c:	82 95       	swap	r24
 17e:	8f 70       	andi	r24, 0x0F	; 15
			EnviarCaracterUART(nibble > 9 ? nibble - 10 + 'A' : nibble + '0');
 180:	8a 30       	cpi	r24, 0x0A	; 10
 182:	10 f0       	brcs	.+4      	; 0x188 <main+0x64>
 184:	89 5c       	subi	r24, 0xC9	; 201
 186:	01 c0       	rjmp	.+2      	; 0x18a <main+0x66>
 188:	80 5d       	subi	r24, 0xD0	; 208
 18a:	0e 94 68 00 	call	0xd0	; 0xd0 <EnviarCaracterUART>
			nibble = datoRecibido & 0x0F;
 18e:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <__data_end>
 192:	8f 70       	andi	r24, 0x0F	; 15
			EnviarCaracterUART(nibble > 9 ? nibble - 10 + 'A' : nibble + '0');
 194:	8a 30       	cpi	r24, 0x0A	; 10
 196:	10 f0       	brcs	.+4      	; 0x19c <main+0x78>
 198:	89 5c       	subi	r24, 0xC9	; 201
 19a:	01 c0       	rjmp	.+2      	; 0x19e <main+0x7a>
 19c:	80 5d       	subi	r24, 0xD0	; 208
 19e:	0e 94 68 00 	call	0xd0	; 0xd0 <EnviarCaracterUART>
			cadena(")\n");
 1a2:	84 eb       	ldi	r24, 0xB4	; 180
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	0e 94 6f 00 	call	0xde	; 0xde <cadena>
			
			datoRecibido = 0;
 1aa:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ae:	8f e3       	ldi	r24, 0x3F	; 63
 1b0:	9c e9       	ldi	r25, 0x9C	; 156
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <main+0x8e>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <main+0x94>
 1b8:	00 00       	nop
 1ba:	ca cf       	rjmp	.-108    	; 0x150 <main+0x2c>

000001bc <__vector_18>:
	// Mantener PD1 (TX) y PD0 (RX) sin cambios
	PORTD |= (1<<PD1);  // Mantener TX en estado alto
}

ISR(USART_RX_vect)
{
 1bc:	1f 92       	push	r1
 1be:	0f 92       	push	r0
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	0f 92       	push	r0
 1c4:	11 24       	eor	r1, r1
 1c6:	8f 93       	push	r24
	datoRecibido = UDR0;
 1c8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1cc:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <__data_end>
 1d0:	8f 91       	pop	r24
 1d2:	0f 90       	pop	r0
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	0f 90       	pop	r0
 1d8:	1f 90       	pop	r1
 1da:	18 95       	reti

000001dc <_exit>:
 1dc:	f8 94       	cli

000001de <__stop_program>:
 1de:	ff cf       	rjmp	.-2      	; 0x1de <__stop_program>
