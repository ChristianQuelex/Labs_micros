
pruebas.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800100  00000380  00000414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000380  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  008001a0  008001a0  000004b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a32  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000743  00000000  00000000  00000fae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000469  00000000  00000000  000016f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000148  00000000  00000000  00001b5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000499  00000000  00000000  00001ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000388  00000000  00000000  0000213d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000024c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 1c 01 	jmp	0x238	; 0x238 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 8c 01 	jmp	0x318	; 0x318 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e8       	ldi	r30, 0x80	; 128
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 3a       	cpi	r26, 0xA0	; 160
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 ea       	ldi	r26, 0xA0	; 160
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 3a       	cpi	r26, 0xA4	; 164
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8e 00 	call	0x11c	; 0x11c <main>
  9e:	0c 94 be 01 	jmp	0x37c	; 0x37c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ConfigurarUART9600>:
}

void ConfigurarUART9600(void)
{
	// Configurar pines: PD0(RX) como entrada, PD1(TX) como salida
	DDRD &= ~(1<<DDD0);
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8e 7f       	andi	r24, 0xFE	; 254
  aa:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1);
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	8a b9       	out	0x0a, r24	; 10
	
	// Configurar UART
	UCSR0A = 0; // Limpiar registro de estado
  b2:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = (1<<RXCIE0) | (1<<RXEN0) | (1<<TXEN0); // Habilitar interrupciones RX, TX y RX
  b6:	88 e9       	ldi	r24, 0x98	; 152
  b8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); // Modo 8 bits, sin paridad, 1 bit de stop
  bc:	86 e0       	ldi	r24, 0x06	; 6
  be:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	// Configurar baud rate (9600 a 16MHz)
	UBRR0 = 103;
  c2:	87 e6       	ldi	r24, 0x67	; 103
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ca:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  ce:	08 95       	ret

000000d0 <ConfigurarADC>:
}

void ConfigurarADC(void)
{
	// Configurar ADC
	ADMUX = (1 << REFS0) | (1 << ADLAR); // Referencia AVCC, ajuste izquierdo
  d0:	80 e6       	ldi	r24, 0x60	; 96
  d2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Habilitar ADC, interrupción y prescaler 128
  d6:	8f e8       	ldi	r24, 0x8F	; 143
  d8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	
	// Deshabilitar entrada digital para PC0 (ADC0)
	DIDR0 |= (1 << ADC0D);
  dc:	ee e7       	ldi	r30, 0x7E	; 126
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	81 60       	ori	r24, 0x01	; 1
  e4:	80 83       	st	Z, r24
  e6:	08 95       	ret

000000e8 <EnviarCaracterUART>:
}

void EnviarCaracterUART(char caracter)
{
	while(!(UCSR0A & (1<<UDRE0))); // Esperar buffer de transmisión vacío
  e8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  ec:	95 ff       	sbrs	r25, 5
  ee:	fc cf       	rjmp	.-8      	; 0xe8 <EnviarCaracterUART>
	UDR0 = caracter;
  f0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  f4:	08 95       	ret

000000f6 <EnviarTextoUART>:
}

void EnviarTextoUART(char *texto)
{
  f6:	0f 93       	push	r16
  f8:	1f 93       	push	r17
  fa:	cf 93       	push	r28
  fc:	8c 01       	movw	r16, r24
	uint8_t i = 0;
  fe:	c0 e0       	ldi	r28, 0x00	; 0
	while(texto[i] != '\0') {
 100:	03 c0       	rjmp	.+6      	; 0x108 <EnviarTextoUART+0x12>
		EnviarCaracterUART(texto[i]);
 102:	0e 94 74 00 	call	0xe8	; 0xe8 <EnviarCaracterUART>
		i++;
 106:	cf 5f       	subi	r28, 0xFF	; 255
}

void EnviarTextoUART(char *texto)
{
	uint8_t i = 0;
	while(texto[i] != '\0') {
 108:	f8 01       	movw	r30, r16
 10a:	ec 0f       	add	r30, r28
 10c:	f1 1d       	adc	r31, r1
 10e:	80 81       	ld	r24, Z
 110:	81 11       	cpse	r24, r1
 112:	f7 cf       	rjmp	.-18     	; 0x102 <EnviarTextoUART+0xc>
		EnviarCaracterUART(texto[i]);
		i++;
	}
}
 114:	cf 91       	pop	r28
 116:	1f 91       	pop	r17
 118:	0f 91       	pop	r16
 11a:	08 95       	ret

0000011c <main>:
volatile uint8_t esperandoCaracter = 0;  // Bandera para recepción de caracteres

int main(void)
{
	// Inicialización de puertos
	DDRB = 0xFF;  // Puerto B como salida
 11c:	8f ef       	ldi	r24, 0xFF	; 255
 11e:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xFF;  // Puerto D como salida
 120:	8a b9       	out	0x0a, r24	; 10
	
	// Configurar periféricos
	ConfigurarUART9600();
 122:	0e 94 53 00 	call	0xa6	; 0xa6 <ConfigurarUART9600>
	ConfigurarADC();
 126:	0e 94 68 00 	call	0xd0	; 0xd0 <ConfigurarADC>
	
	// Habilitar interrupciones globales
	sei();
 12a:	78 94       	sei
	
	// Mensaje inicial
	EnviarTextoUART("\nSistema Iniciado\n");
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	0e 94 7b 00 	call	0xf6	; 0xf6 <EnviarTextoUART>
	
	while (1)
	{
		switch(estadoPrograma) {
 134:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <estadoPrograma>
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	19 f0       	breq	.+6      	; 0x142 <main+0x26>
 13c:	82 30       	cpi	r24, 0x02	; 2
 13e:	e1 f0       	breq	.+56     	; 0x178 <main+0x5c>
 140:	f9 cf       	rjmp	.-14     	; 0x134 <main+0x18>
			case 0: // Estado de espera
			// No hacer nada, esperar interrupción
			break;
			
			case 1: // Mostrar menú
			EnviarCaracterUART(SALTO_LINEA);
 142:	8a e0       	ldi	r24, 0x0A	; 10
 144:	0e 94 74 00 	call	0xe8	; 0xe8 <EnviarCaracterUART>
			EnviarTextoUART("Seleccione una opcion:");
 148:	83 e1       	ldi	r24, 0x13	; 19
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	0e 94 7b 00 	call	0xf6	; 0xf6 <EnviarTextoUART>
			EnviarCaracterUART(SALTO_LINEA);
 150:	8a e0       	ldi	r24, 0x0A	; 10
 152:	0e 94 74 00 	call	0xe8	; 0xe8 <EnviarCaracterUART>
			EnviarTextoUART("1. Leer Potenciometro");
 156:	8a e2       	ldi	r24, 0x2A	; 42
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	0e 94 7b 00 	call	0xf6	; 0xf6 <EnviarTextoUART>
			EnviarCaracterUART(SALTO_LINEA);
 15e:	8a e0       	ldi	r24, 0x0A	; 10
 160:	0e 94 74 00 	call	0xe8	; 0xe8 <EnviarCaracterUART>
			EnviarTextoUART("2. Enviar caracter ASCII");
 164:	80 e4       	ldi	r24, 0x40	; 64
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	0e 94 7b 00 	call	0xf6	; 0xf6 <EnviarTextoUART>
			EnviarCaracterUART(SALTO_LINEA);
 16c:	8a e0       	ldi	r24, 0x0A	; 10
 16e:	0e 94 74 00 	call	0xe8	; 0xe8 <EnviarCaracterUART>
			estadoPrograma = 0; // Volver a espera
 172:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <estadoPrograma>
			break;
 176:	de cf       	rjmp	.-68     	; 0x134 <main+0x18>
			
			case 2: // Procesar ADC
			ADCSRA |= (1 << ADSC); // Iniciar conversión
 178:	ea e7       	ldi	r30, 0x7A	; 122
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	80 64       	ori	r24, 0x40	; 64
 180:	80 83       	st	Z, r24
			estadoPrograma = 0; // Volver a espera
 182:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <estadoPrograma>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 186:	2f ef       	ldi	r18, 0xFF	; 255
 188:	86 e7       	ldi	r24, 0x76	; 118
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	21 50       	subi	r18, 0x01	; 1
 18e:	80 40       	sbci	r24, 0x00	; 0
 190:	90 40       	sbci	r25, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <main+0x70>
 194:	00 c0       	rjmp	.+0      	; 0x196 <main+0x7a>
 196:	00 00       	nop
 198:	cd cf       	rjmp	.-102    	; 0x134 <main+0x18>

0000019a <ProcesarValorADC>:
		i++;
	}
}

void ProcesarValorADC(uint8_t valor)
{
 19a:	0f 93       	push	r16
 19c:	1f 93       	push	r17
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	d8 2f       	mov	r29, r24
	uint8_t unidades = valor % 10;
 1a4:	cd ec       	ldi	r28, 0xCD	; 205
 1a6:	8c 9f       	mul	r24, r28
 1a8:	81 2d       	mov	r24, r1
 1aa:	11 24       	eor	r1, r1
 1ac:	18 2f       	mov	r17, r24
 1ae:	16 95       	lsr	r17
 1b0:	16 95       	lsr	r17
 1b2:	16 95       	lsr	r17
 1b4:	11 0f       	add	r17, r17
 1b6:	91 2f       	mov	r25, r17
 1b8:	99 0f       	add	r25, r25
 1ba:	99 0f       	add	r25, r25
 1bc:	19 0f       	add	r17, r25
 1be:	9d 2f       	mov	r25, r29
 1c0:	91 1b       	sub	r25, r17
 1c2:	19 2f       	mov	r17, r25
	uint8_t decenas = (valor / 10) % 10;
 1c4:	86 95       	lsr	r24
 1c6:	86 95       	lsr	r24
 1c8:	86 95       	lsr	r24
 1ca:	8c 9f       	mul	r24, r28
 1cc:	c1 2d       	mov	r28, r1
 1ce:	11 24       	eor	r1, r1
 1d0:	c6 95       	lsr	r28
 1d2:	c6 95       	lsr	r28
 1d4:	c6 95       	lsr	r28
 1d6:	cc 0f       	add	r28, r28
 1d8:	9c 2f       	mov	r25, r28
 1da:	99 0f       	add	r25, r25
 1dc:	99 0f       	add	r25, r25
 1de:	c9 0f       	add	r28, r25
 1e0:	8c 1b       	sub	r24, r28
 1e2:	c8 2f       	mov	r28, r24
	uint8_t centenas = (valor / 100) % 10;
 1e4:	09 e2       	ldi	r16, 0x29	; 41
 1e6:	d0 9f       	mul	r29, r16
 1e8:	01 2d       	mov	r16, r1
 1ea:	11 24       	eor	r1, r1
 1ec:	02 95       	swap	r16
 1ee:	0f 70       	andi	r16, 0x0F	; 15
	
	EnviarTextoUART("\nValor Potenciometro: ");
 1f0:	89 e5       	ldi	r24, 0x59	; 89
 1f2:	91 e0       	ldi	r25, 0x01	; 1
 1f4:	0e 94 7b 00 	call	0xf6	; 0xf6 <EnviarTextoUART>
	EnviarCaracterUART(ASCII_0 + centenas);
 1f8:	80 e3       	ldi	r24, 0x30	; 48
 1fa:	80 0f       	add	r24, r16
 1fc:	0e 94 74 00 	call	0xe8	; 0xe8 <EnviarCaracterUART>
	EnviarCaracterUART(ASCII_0 + decenas);
 200:	80 e3       	ldi	r24, 0x30	; 48
 202:	8c 0f       	add	r24, r28
 204:	0e 94 74 00 	call	0xe8	; 0xe8 <EnviarCaracterUART>
	EnviarCaracterUART(ASCII_0 + unidades);
 208:	80 e3       	ldi	r24, 0x30	; 48
 20a:	81 0f       	add	r24, r17
 20c:	0e 94 74 00 	call	0xe8	; 0xe8 <EnviarCaracterUART>
	EnviarCaracterUART(SALTO_LINEA);
 210:	8a e0       	ldi	r24, 0x0A	; 10
 212:	0e 94 74 00 	call	0xe8	; 0xe8 <EnviarCaracterUART>
	
	PORTD = (valor & 0x3F) << 2;
 216:	8d 2f       	mov	r24, r29
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	8b b9       	out	0x0b, r24	; 11
	PORTB = (valor >> 6) & 0x03;
 224:	d2 95       	swap	r29
 226:	d6 95       	lsr	r29
 228:	d6 95       	lsr	r29
 22a:	d3 70       	andi	r29, 0x03	; 3
 22c:	d5 b9       	out	0x05, r29	; 5
}
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	1f 91       	pop	r17
 234:	0f 91       	pop	r16
 236:	08 95       	ret

00000238 <__vector_18>:

// Interrupción por recepción UART - Versión definitiva
ISR(USART_RX_vect)
{
 238:	1f 92       	push	r1
 23a:	0f 92       	push	r0
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	0f 92       	push	r0
 240:	11 24       	eor	r1, r1
 242:	2f 93       	push	r18
 244:	3f 93       	push	r19
 246:	4f 93       	push	r20
 248:	5f 93       	push	r21
 24a:	6f 93       	push	r22
 24c:	7f 93       	push	r23
 24e:	8f 93       	push	r24
 250:	9f 93       	push	r25
 252:	af 93       	push	r26
 254:	bf 93       	push	r27
 256:	ef 93       	push	r30
 258:	ff 93       	push	r31
	datoRecibido = UDR0;
 25a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 25e:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <datoRecibido>
	
	// Ignorar siempre caracteres de control
	if(datoRecibido == SALTO_LINEA || datoRecibido == RETORNO_CARRO) {
 262:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <datoRecibido>
 266:	8a 30       	cpi	r24, 0x0A	; 10
 268:	09 f4       	brne	.+2      	; 0x26c <__vector_18+0x34>
 26a:	45 c0       	rjmp	.+138    	; 0x2f6 <__vector_18+0xbe>
 26c:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <datoRecibido>
 270:	8d 30       	cpi	r24, 0x0D	; 13
 272:	09 f4       	brne	.+2      	; 0x276 <__vector_18+0x3e>
 274:	40 c0       	rjmp	.+128    	; 0x2f6 <__vector_18+0xbe>
		return;
	}

	// Modo recepción de caracteres activado
	if(esperandoCaracter) {
 276:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <__data_end>
 27a:	88 23       	and	r24, r24
 27c:	09 f1       	breq	.+66     	; 0x2c0 <__vector_18+0x88>
		esperandoCaracter = 0; // Desactivar bandera
 27e:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <__data_end>
		
		// Mostrar confirmación
		EnviarTextoUART("\nCaracter recibido: ");
 282:	80 e7       	ldi	r24, 0x70	; 112
 284:	91 e0       	ldi	r25, 0x01	; 1
 286:	0e 94 7b 00 	call	0xf6	; 0xf6 <EnviarTextoUART>
		EnviarCaracterUART(datoRecibido);
 28a:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <datoRecibido>
 28e:	0e 94 74 00 	call	0xe8	; 0xe8 <EnviarCaracterUART>
		EnviarTextoUART("\n");
 292:	81 e1       	ldi	r24, 0x11	; 17
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	0e 94 7b 00 	call	0xf6	; 0xf6 <EnviarTextoUART>
		
		// Mostrar en LEDs
		PORTD = (datoRecibido & 0x3F) << 2;
 29a:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <datoRecibido>
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	8b b9       	out	0x0b, r24	; 11
		PORTB = (datoRecibido >> 6) & 0x03;
 2aa:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <datoRecibido>
 2ae:	82 95       	swap	r24
 2b0:	86 95       	lsr	r24
 2b2:	86 95       	lsr	r24
 2b4:	83 70       	andi	r24, 0x03	; 3
 2b6:	85 b9       	out	0x05, r24	; 5
		
		// Volver al menú
		estadoPrograma = 1;
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <estadoPrograma>
		return;
 2be:	1b c0       	rjmp	.+54     	; 0x2f6 <__vector_18+0xbe>
	}

	// Procesamiento de opciones del menú
	if(estadoPrograma == 0) {
 2c0:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <estadoPrograma>
 2c4:	81 11       	cpse	r24, r1
 2c6:	17 c0       	rjmp	.+46     	; 0x2f6 <__vector_18+0xbe>
		if(datoRecibido == MENU_OPCION1) {
 2c8:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <datoRecibido>
 2cc:	81 33       	cpi	r24, 0x31	; 49
 2ce:	21 f4       	brne	.+8      	; 0x2d8 <__vector_18+0xa0>
			estadoPrograma = 2; // Leer ADC
 2d0:	82 e0       	ldi	r24, 0x02	; 2
 2d2:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <estadoPrograma>
 2d6:	0f c0       	rjmp	.+30     	; 0x2f6 <__vector_18+0xbe>
		}
		else if(datoRecibido == MENU_OPCION2) {
 2d8:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <datoRecibido>
 2dc:	82 33       	cpi	r24, 0x32	; 50
 2de:	41 f4       	brne	.+16     	; 0x2f0 <__vector_18+0xb8>
			// Activar modo recepción de caracteres
			esperandoCaracter = 1;
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <__data_end>
			EnviarTextoUART("\nIngrese caracter ASCII: ");
 2e6:	85 e8       	ldi	r24, 0x85	; 133
 2e8:	91 e0       	ldi	r25, 0x01	; 1
 2ea:	0e 94 7b 00 	call	0xf6	; 0xf6 <EnviarTextoUART>
 2ee:	03 c0       	rjmp	.+6      	; 0x2f6 <__vector_18+0xbe>
		}
		else {
			// Opción no válida
			estadoPrograma = 1; // Mostrar menú
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <estadoPrograma>
		}
	}
}
 2f6:	ff 91       	pop	r31
 2f8:	ef 91       	pop	r30
 2fa:	bf 91       	pop	r27
 2fc:	af 91       	pop	r26
 2fe:	9f 91       	pop	r25
 300:	8f 91       	pop	r24
 302:	7f 91       	pop	r23
 304:	6f 91       	pop	r22
 306:	5f 91       	pop	r21
 308:	4f 91       	pop	r20
 30a:	3f 91       	pop	r19
 30c:	2f 91       	pop	r18
 30e:	0f 90       	pop	r0
 310:	0f be       	out	0x3f, r0	; 63
 312:	0f 90       	pop	r0
 314:	1f 90       	pop	r1
 316:	18 95       	reti

00000318 <__vector_21>:

// Interrupción por fin de conversión ADC
ISR(ADC_vect)
{
 318:	1f 92       	push	r1
 31a:	0f 92       	push	r0
 31c:	0f b6       	in	r0, 0x3f	; 63
 31e:	0f 92       	push	r0
 320:	11 24       	eor	r1, r1
 322:	2f 93       	push	r18
 324:	3f 93       	push	r19
 326:	4f 93       	push	r20
 328:	5f 93       	push	r21
 32a:	6f 93       	push	r22
 32c:	7f 93       	push	r23
 32e:	8f 93       	push	r24
 330:	9f 93       	push	r25
 332:	af 93       	push	r26
 334:	bf 93       	push	r27
 336:	ef 93       	push	r30
 338:	ff 93       	push	r31
	valorPotenciometro = ADCH; // Leer resultado de 8 bits (ADLAR=1)
 33a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 33e:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <valorPotenciometro>
	ProcesarValorADC(valorPotenciometro);
 342:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <valorPotenciometro>
 346:	0e 94 cd 00 	call	0x19a	; 0x19a <ProcesarValorADC>
	
	ADCSRA |= (1 << ADIF); // Limpiar bandera de interrupción
 34a:	ea e7       	ldi	r30, 0x7A	; 122
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	80 81       	ld	r24, Z
 350:	80 61       	ori	r24, 0x10	; 16
 352:	80 83       	st	Z, r24
	estadoPrograma = 1; // Volver al menú
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <estadoPrograma>
 35a:	ff 91       	pop	r31
 35c:	ef 91       	pop	r30
 35e:	bf 91       	pop	r27
 360:	af 91       	pop	r26
 362:	9f 91       	pop	r25
 364:	8f 91       	pop	r24
 366:	7f 91       	pop	r23
 368:	6f 91       	pop	r22
 36a:	5f 91       	pop	r21
 36c:	4f 91       	pop	r20
 36e:	3f 91       	pop	r19
 370:	2f 91       	pop	r18
 372:	0f 90       	pop	r0
 374:	0f be       	out	0x3f, r0	; 63
 376:	0f 90       	pop	r0
 378:	1f 90       	pop	r1
 37a:	18 95       	reti

0000037c <_exit>:
 37c:	f8 94       	cli

0000037e <__stop_program>:
 37e:	ff cf       	rjmp	.-2      	; 0x37e <__stop_program>
