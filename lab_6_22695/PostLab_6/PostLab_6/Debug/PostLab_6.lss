
PostLab_6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009c  00800100  0000039a  0000042e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000039a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080019c  0080019c  000004ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000053c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a4e  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000073a  00000000  00000000  00000fe2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000048a  00000000  00000000  0000171c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000148  00000000  00000000  00001ba8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048b  00000000  00000000  00001cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003d0  00000000  00000000  0000217b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000254b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 99 01 	jmp	0x332	; 0x332 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e9       	ldi	r30, 0x9A	; 154
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 39       	cpi	r26, 0x9C	; 156
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e9       	ldi	r26, 0x9C	; 156
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 3a       	cpi	r26, 0xA0	; 160
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8e 00 	call	0x11c	; 0x11c <main>
  9e:	0c 94 cb 01 	jmp	0x396	; 0x396 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ConfigurarUART9600>:
}

void ConfigurarUART9600(void)
{
	// Configurar pines: PD0(RX) como entrada, PD1(TX) como salida
	DDRD &= ~(1<<DDD0);
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8e 7f       	andi	r24, 0xFE	; 254
  aa:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1);
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	8a b9       	out	0x0a, r24	; 10
	
	// Configurar UART
	UCSR0A = 0; // Limpiar registro de estado
  b2:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = (1<<RXCIE0) | (1<<RXEN0) | (1<<TXEN0); // Habilitar interrupciones RX, TX y RX
  b6:	88 e9       	ldi	r24, 0x98	; 152
  b8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); // Modo 8 bits, sin paridad, 1 bit de stop
  bc:	86 e0       	ldi	r24, 0x06	; 6
  be:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	// Configurar baud rate (9600 a 16MHz)
	// comunicacion 
	UBRR0 = 103;
  c2:	87 e6       	ldi	r24, 0x67	; 103
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ca:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  ce:	08 95       	ret

000000d0 <ConfigurarADC>:
}

void ConfigurarADC(void)
{
	// Configurar ADC
	ADMUX = (1 << REFS0) | (1 << ADLAR); // Referencia AVCC, ajuste izquierdo
  d0:	80 e6       	ldi	r24, 0x60	; 96
  d2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Habilitar ADC, interrupción y prescaler 128
  d6:	8f e8       	ldi	r24, 0x8F	; 143
  d8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	// lectura correcta del ADC 
	
	// Deshabilitar entrada digital para PC0 (ADC0) - necesario para utilizarlo 
	DIDR0 |= (1 << ADC0D);
  dc:	ee e7       	ldi	r30, 0x7E	; 126
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	81 60       	ori	r24, 0x01	; 1
  e4:	80 83       	st	Z, r24
  e6:	08 95       	ret

000000e8 <EnviarCaracterUART>:
}

	// Sirve para esperar a que se envie todo 
void EnviarCaracterUART(char caracter)
{
	while(!(UCSR0A & (1<<UDRE0))); // Esperar buffer de transmisión vacío
  e8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  ec:	95 ff       	sbrs	r25, 5
  ee:	fc cf       	rjmp	.-8      	; 0xe8 <EnviarCaracterUART>
	UDR0 = caracter;
  f0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  f4:	08 95       	ret

000000f6 <EnviarTextoUART>:
}
	// Cnfiguraciones para textos 
void EnviarTextoUART(char *texto)
{
  f6:	0f 93       	push	r16
  f8:	1f 93       	push	r17
  fa:	cf 93       	push	r28
  fc:	8c 01       	movw	r16, r24
	uint8_t i = 0;
  fe:	c0 e0       	ldi	r28, 0x00	; 0
	while(texto[i] != '\0') {
 100:	03 c0       	rjmp	.+6      	; 0x108 <EnviarTextoUART+0x12>
		EnviarCaracterUART(texto[i]);
 102:	0e 94 74 00 	call	0xe8	; 0xe8 <EnviarCaracterUART>
		i++;
 106:	cf 5f       	subi	r28, 0xFF	; 255
}
	// Cnfiguraciones para textos 
void EnviarTextoUART(char *texto)
{
	uint8_t i = 0;
	while(texto[i] != '\0') {
 108:	f8 01       	movw	r30, r16
 10a:	ec 0f       	add	r30, r28
 10c:	f1 1d       	adc	r31, r1
 10e:	80 81       	ld	r24, Z
 110:	81 11       	cpse	r24, r1
 112:	f7 cf       	rjmp	.-18     	; 0x102 <EnviarTextoUART+0xc>
		EnviarCaracterUART(texto[i]);
		i++;
	}
}
 114:	cf 91       	pop	r28
 116:	1f 91       	pop	r17
 118:	0f 91       	pop	r16
 11a:	08 95       	ret

0000011c <main>:
volatile uint8_t estadoPrograma = 0; // 0=espera, 1=menu, 2=adc, 3=ascii

int main(void)
{
	// Inicialización de puertos
	DDRB = 0xFF;  // Puerto B como salida
 11c:	8f ef       	ldi	r24, 0xFF	; 255
 11e:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xFF;  // Puerto D como salida
 120:	8a b9       	out	0x0a, r24	; 10
	
	// Configurar periféricos
	ConfigurarUART9600();
 122:	0e 94 53 00 	call	0xa6	; 0xa6 <ConfigurarUART9600>
	ConfigurarADC();
 126:	0e 94 68 00 	call	0xd0	; 0xd0 <ConfigurarADC>
	
	// Habilitar interrupciones globales
	sei();
 12a:	78 94       	sei
	
	// Mensaje inicial
	EnviarTextoUART("\nSistema Iniciado\n");
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	0e 94 7b 00 	call	0xf6	; 0xf6 <EnviarTextoUART>
	
	while (1)
	{
		switch(estadoPrograma) {
 134:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <__data_end>
 138:	82 30       	cpi	r24, 0x02	; 2
 13a:	f9 f0       	breq	.+62     	; 0x17a <main+0x5e>
 13c:	83 30       	cpi	r24, 0x03	; 3
 13e:	71 f1       	breq	.+92     	; 0x19c <main+0x80>
 140:	81 30       	cpi	r24, 0x01	; 1
 142:	c1 f7       	brne	.-16     	; 0x134 <main+0x18>
			// No hacer nada, esperar interrupción
			// aca permanece 
			break;
			
			case 1: // Mostrar menú
			EnviarCaracterUART(SALTO_LINEA);		// valor 10
 144:	8a e0       	ldi	r24, 0x0A	; 10
 146:	0e 94 74 00 	call	0xe8	; 0xe8 <EnviarCaracterUART>
			EnviarTextoUART("Seleccione una opcion:");
 14a:	83 e1       	ldi	r24, 0x13	; 19
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	0e 94 7b 00 	call	0xf6	; 0xf6 <EnviarTextoUART>
			EnviarCaracterUART(SALTO_LINEA);
 152:	8a e0       	ldi	r24, 0x0A	; 10
 154:	0e 94 74 00 	call	0xe8	; 0xe8 <EnviarCaracterUART>
			EnviarTextoUART("1. Leer Potenciometro");
 158:	8a e2       	ldi	r24, 0x2A	; 42
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	0e 94 7b 00 	call	0xf6	; 0xf6 <EnviarTextoUART>
			EnviarCaracterUART(SALTO_LINEA);
 160:	8a e0       	ldi	r24, 0x0A	; 10
 162:	0e 94 74 00 	call	0xe8	; 0xe8 <EnviarCaracterUART>
			EnviarTextoUART("2. Enviar caracter ASCII");
 166:	80 e4       	ldi	r24, 0x40	; 64
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	0e 94 7b 00 	call	0xf6	; 0xf6 <EnviarTextoUART>
			EnviarCaracterUART(SALTO_LINEA);
 16e:	8a e0       	ldi	r24, 0x0A	; 10
 170:	0e 94 74 00 	call	0xe8	; 0xe8 <EnviarCaracterUART>
			
			estadoPrograma = 0; // Volver a espera
 174:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <__data_end>
			break;
 178:	dd cf       	rjmp	.-70     	; 0x134 <main+0x18>
			//reinicia- vuelve a 0
			
			case 2: // Procesar ADC
			ADCSRA |= (1 << ADSC); // Iniciar conversión
 17a:	ea e7       	ldi	r30, 0x7A	; 122
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	80 64       	ori	r24, 0x40	; 64
 182:	80 83       	st	Z, r24
			estadoPrograma = 0; // Volver a espera
 184:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 188:	2f ef       	ldi	r18, 0xFF	; 255
 18a:	86 e7       	ldi	r24, 0x76	; 118
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	21 50       	subi	r18, 0x01	; 1
 190:	80 40       	sbci	r24, 0x00	; 0
 192:	90 40       	sbci	r25, 0x00	; 0
 194:	e1 f7       	brne	.-8      	; 0x18e <main+0x72>
 196:	00 c0       	rjmp	.+0      	; 0x198 <main+0x7c>
 198:	00 00       	nop
 19a:	cc cf       	rjmp	.-104    	; 0x134 <main+0x18>
			_delay_ms(TIEMPO_ESPERA);
			break;
			
			case 3: // Esperar ASCII
			EnviarCaracterUART(SALTO_LINEA);
 19c:	8a e0       	ldi	r24, 0x0A	; 10
 19e:	0e 94 74 00 	call	0xe8	; 0xe8 <EnviarCaracterUART>
			EnviarTextoUART("Ingrese caracter ASCII:");
 1a2:	89 e5       	ldi	r24, 0x59	; 89
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	0e 94 7b 00 	call	0xf6	; 0xf6 <EnviarTextoUART>
			EnviarCaracterUART(SALTO_LINEA);
 1aa:	8a e0       	ldi	r24, 0x0A	; 10
 1ac:	0e 94 74 00 	call	0xe8	; 0xe8 <EnviarCaracterUART>
			estadoPrograma = 0; // Volver a espera
 1b0:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <__data_end>
			break;
 1b4:	bf cf       	rjmp	.-130    	; 0x134 <main+0x18>

000001b6 <ProcesarValorADC>:
		i++;
	}
}

void ProcesarValorADC(uint8_t valor)
{
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	d8 2f       	mov	r29, r24
	//Configuracion matematica 
	uint8_t unidades = valor % 10;
 1c0:	cd ec       	ldi	r28, 0xCD	; 205
 1c2:	8c 9f       	mul	r24, r28
 1c4:	81 2d       	mov	r24, r1
 1c6:	11 24       	eor	r1, r1
 1c8:	18 2f       	mov	r17, r24
 1ca:	16 95       	lsr	r17
 1cc:	16 95       	lsr	r17
 1ce:	16 95       	lsr	r17
 1d0:	11 0f       	add	r17, r17
 1d2:	91 2f       	mov	r25, r17
 1d4:	99 0f       	add	r25, r25
 1d6:	99 0f       	add	r25, r25
 1d8:	19 0f       	add	r17, r25
 1da:	9d 2f       	mov	r25, r29
 1dc:	91 1b       	sub	r25, r17
 1de:	19 2f       	mov	r17, r25
	uint8_t decenas = (valor / 10) % 10;
 1e0:	86 95       	lsr	r24
 1e2:	86 95       	lsr	r24
 1e4:	86 95       	lsr	r24
 1e6:	8c 9f       	mul	r24, r28
 1e8:	c1 2d       	mov	r28, r1
 1ea:	11 24       	eor	r1, r1
 1ec:	c6 95       	lsr	r28
 1ee:	c6 95       	lsr	r28
 1f0:	c6 95       	lsr	r28
 1f2:	cc 0f       	add	r28, r28
 1f4:	9c 2f       	mov	r25, r28
 1f6:	99 0f       	add	r25, r25
 1f8:	99 0f       	add	r25, r25
 1fa:	c9 0f       	add	r28, r25
 1fc:	8c 1b       	sub	r24, r28
 1fe:	c8 2f       	mov	r28, r24
	uint8_t centenas = (valor / 100) % 10;
 200:	09 e2       	ldi	r16, 0x29	; 41
 202:	d0 9f       	mul	r29, r16
 204:	01 2d       	mov	r16, r1
 206:	11 24       	eor	r1, r1
 208:	02 95       	swap	r16
 20a:	0f 70       	andi	r16, 0x0F	; 15
	
	// Enviar texto de Valor
	EnviarTextoUART("Valor Potenciometro: ");
 20c:	81 e7       	ldi	r24, 0x71	; 113
 20e:	91 e0       	ldi	r25, 0x01	; 1
 210:	0e 94 7b 00 	call	0xf6	; 0xf6 <EnviarTextoUART>
	EnviarCaracterUART(ASCII_0 + centenas);
 214:	80 e3       	ldi	r24, 0x30	; 48
 216:	80 0f       	add	r24, r16
 218:	0e 94 74 00 	call	0xe8	; 0xe8 <EnviarCaracterUART>
	EnviarCaracterUART(ASCII_0 + decenas);
 21c:	80 e3       	ldi	r24, 0x30	; 48
 21e:	8c 0f       	add	r24, r28
 220:	0e 94 74 00 	call	0xe8	; 0xe8 <EnviarCaracterUART>
	EnviarCaracterUART(ASCII_0 + unidades);
 224:	80 e3       	ldi	r24, 0x30	; 48
 226:	81 0f       	add	r24, r17
 228:	0e 94 74 00 	call	0xe8	; 0xe8 <EnviarCaracterUART>
	EnviarCaracterUART(SALTO_LINEA);
 22c:	8a e0       	ldi	r24, 0x0A	; 10
 22e:	0e 94 74 00 	call	0xe8	; 0xe8 <EnviarCaracterUART>
	EnviarCaracterUART(RETORNO_CARRO);
 232:	8d e0       	ldi	r24, 0x0D	; 13
 234:	0e 94 74 00 	call	0xe8	; 0xe8 <EnviarCaracterUART>
	
	// Presentar el valor en puertos 
	PORTD = (valor & 0x3F) << 2;  // 6 bits menos significativos en PD5-PD0
 238:	8d 2f       	mov	r24, r29
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	8b b9       	out	0x0b, r24	; 11
	PORTB = (valor >> 6) & 0x03;  // 2 bits más significativos en PB1-PB0
 246:	d2 95       	swap	r29
 248:	d6 95       	lsr	r29
 24a:	d6 95       	lsr	r29
 24c:	d3 70       	andi	r29, 0x03	; 3
 24e:	d5 b9       	out	0x05, r29	; 5
}
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	08 95       	ret

0000025a <__vector_18>:

// Interrupción por recepción UART
ISR(USART_RX_vect)
{
 25a:	1f 92       	push	r1
 25c:	0f 92       	push	r0
 25e:	0f b6       	in	r0, 0x3f	; 63
 260:	0f 92       	push	r0
 262:	11 24       	eor	r1, r1
 264:	2f 93       	push	r18
 266:	3f 93       	push	r19
 268:	4f 93       	push	r20
 26a:	5f 93       	push	r21
 26c:	6f 93       	push	r22
 26e:	7f 93       	push	r23
 270:	8f 93       	push	r24
 272:	9f 93       	push	r25
 274:	af 93       	push	r26
 276:	bf 93       	push	r27
 278:	ef 93       	push	r30
 27a:	ff 93       	push	r31
	datoRecibido = UDR0;		// Transmisor - receptor
 27c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 280:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <datoRecibido>
	// ignorar caracteres de control (salto y lineas de carro)
	if (datoRecibido == SALTO_LINEA || datoRecibido == RETORNO_CARRO)
 284:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <datoRecibido>
 288:	8a 30       	cpi	r24, 0x0A	; 10
 28a:	09 f4       	brne	.+2      	; 0x28e <__vector_18+0x34>
 28c:	41 c0       	rjmp	.+130    	; 0x310 <__vector_18+0xb6>
 28e:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <datoRecibido>
 292:	8d 30       	cpi	r24, 0x0D	; 13
 294:	e9 f1       	breq	.+122    	; 0x310 <__vector_18+0xb6>
	{	return;
	}
	
	
	if(estadoPrograma == 0) {
 296:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <__data_end>
 29a:	81 11       	cpse	r24, r1
 29c:	18 c0       	rjmp	.+48     	; 0x2ce <__vector_18+0x74>
		if(datoRecibido == MENU_OPCION1) {
 29e:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <datoRecibido>
 2a2:	81 33       	cpi	r24, 0x31	; 49
 2a4:	31 f4       	brne	.+12     	; 0x2b2 <__vector_18+0x58>
			opcionSeleccionada = MENU_OPCION1;			// Variable con valor 1
 2a6:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <opcionSeleccionada>
			estadoPrograma = 2; // Estado para procesar ADC
 2aa:	82 e0       	ldi	r24, 0x02	; 2
 2ac:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <__data_end>
 2b0:	2f c0       	rjmp	.+94     	; 0x310 <__vector_18+0xb6>
		}
		else if(datoRecibido == MENU_OPCION2) {
 2b2:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <datoRecibido>
 2b6:	82 33       	cpi	r24, 0x32	; 50
 2b8:	31 f4       	brne	.+12     	; 0x2c6 <__vector_18+0x6c>
			opcionSeleccionada = MENU_OPCION2;			// Variable con valor 2 
 2ba:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <opcionSeleccionada>
			estadoPrograma = 3; // Estado para recibir ASCII
 2be:	83 e0       	ldi	r24, 0x03	; 3
 2c0:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <__data_end>
 2c4:	25 c0       	rjmp	.+74     	; 0x310 <__vector_18+0xb6>
			//while(UCSR0A & (1 << RXEN0)) {UDR0;}
			//	EnviarTextoUART("\n Ingrese un caracter: ")
		}
		else {
			estadoPrograma = 1; // Mostrar menú de nuevo
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <__data_end>
 2cc:	21 c0       	rjmp	.+66     	; 0x310 <__vector_18+0xb6>
		}
	}
	else if(estadoPrograma == 3) {
 2ce:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <__data_end>
 2d2:	83 30       	cpi	r24, 0x03	; 3
 2d4:	e9 f4       	brne	.+58     	; 0x310 <__vector_18+0xb6>
		
		
		
		// Mostrar caracter ASCII recibido
		EnviarTextoUART("Caracter recibido: ");
 2d6:	87 e8       	ldi	r24, 0x87	; 135
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	0e 94 7b 00 	call	0xf6	; 0xf6 <EnviarTextoUART>
		EnviarCaracterUART(datoRecibido);
 2de:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <datoRecibido>
 2e2:	0e 94 74 00 	call	0xe8	; 0xe8 <EnviarCaracterUART>
		EnviarCaracterUART(SALTO_LINEA);
 2e6:	8a e0       	ldi	r24, 0x0A	; 10
 2e8:	0e 94 74 00 	call	0xe8	; 0xe8 <EnviarCaracterUART>
		
		// Mostrar en puertos
		PORTD = (datoRecibido & 0x3F) << 2;  // 6 bits menos significativos
 2ec:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <datoRecibido>
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	8b b9       	out	0x0b, r24	; 11
		PORTB = (datoRecibido >> 6) & 0x03;  // 2 bits más significativos
 2fc:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <datoRecibido>
 300:	82 95       	swap	r24
 302:	86 95       	lsr	r24
 304:	86 95       	lsr	r24
 306:	83 70       	andi	r24, 0x03	; 3
 308:	85 b9       	out	0x05, r24	; 5
		
		estadoPrograma = 1; // Volver al menú
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <__data_end>
	}
}
 310:	ff 91       	pop	r31
 312:	ef 91       	pop	r30
 314:	bf 91       	pop	r27
 316:	af 91       	pop	r26
 318:	9f 91       	pop	r25
 31a:	8f 91       	pop	r24
 31c:	7f 91       	pop	r23
 31e:	6f 91       	pop	r22
 320:	5f 91       	pop	r21
 322:	4f 91       	pop	r20
 324:	3f 91       	pop	r19
 326:	2f 91       	pop	r18
 328:	0f 90       	pop	r0
 32a:	0f be       	out	0x3f, r0	; 63
 32c:	0f 90       	pop	r0
 32e:	1f 90       	pop	r1
 330:	18 95       	reti

00000332 <__vector_21>:

// Interrupción por fin de conversión ADC
ISR(ADC_vect)
{
 332:	1f 92       	push	r1
 334:	0f 92       	push	r0
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	0f 92       	push	r0
 33a:	11 24       	eor	r1, r1
 33c:	2f 93       	push	r18
 33e:	3f 93       	push	r19
 340:	4f 93       	push	r20
 342:	5f 93       	push	r21
 344:	6f 93       	push	r22
 346:	7f 93       	push	r23
 348:	8f 93       	push	r24
 34a:	9f 93       	push	r25
 34c:	af 93       	push	r26
 34e:	bf 93       	push	r27
 350:	ef 93       	push	r30
 352:	ff 93       	push	r31
	// ADCH para convercion-division de valores mas significativos y menos
	valorPotenciometro = ADCH; // Leer resultado de 8 bits (ADLAR=1)
 354:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 358:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <valorPotenciometro>
	ProcesarValorADC(valorPotenciometro);
 35c:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <valorPotenciometro>
 360:	0e 94 db 00 	call	0x1b6	; 0x1b6 <ProcesarValorADC>
	
	ADCSRA |= (1 << ADIF); // Limpiar bandera de interrupción
 364:	ea e7       	ldi	r30, 0x7A	; 122
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	80 81       	ld	r24, Z
 36a:	80 61       	ori	r24, 0x10	; 16
 36c:	80 83       	st	Z, r24
	estadoPrograma = 1; // Volver al menú
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <__data_end>
 374:	ff 91       	pop	r31
 376:	ef 91       	pop	r30
 378:	bf 91       	pop	r27
 37a:	af 91       	pop	r26
 37c:	9f 91       	pop	r25
 37e:	8f 91       	pop	r24
 380:	7f 91       	pop	r23
 382:	6f 91       	pop	r22
 384:	5f 91       	pop	r21
 386:	4f 91       	pop	r20
 388:	3f 91       	pop	r19
 38a:	2f 91       	pop	r18
 38c:	0f 90       	pop	r0
 38e:	0f be       	out	0x3f, r0	; 63
 390:	0f 90       	pop	r0
 392:	1f 90       	pop	r1
 394:	18 95       	reti

00000396 <_exit>:
 396:	f8 94       	cli

00000398 <__stop_program>:
 398:	ff cf       	rjmp	.-2      	; 0x398 <__stop_program>
